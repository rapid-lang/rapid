Terminals which are not used

   IN
   EOF


Rules never reduced

    5 program: /* empty */

    8 datatype_list: /* empty */
   11              | /* empty */

   12 return_type: /* empty */

   19 arguments: /* empty */

   28 fstmt_list: /* empty */

   30 func_stmt: /* empty */

   33 stmt: /* empty */

   41 print: /* empty */

   45 expr_opt: /* empty */

   52 fcall: /* empty */

   54 expr: /* empty */

   71 expression_list: /* empty */

   73 expression_list_opt: /* empty */
   74                    | /* empty */

   76 expression_list_internal: /* empty */


State 0 conflicts: 11 reduce/reduce
State 1 conflicts: 10 shift/reduce, 2 reduce/reduce
State 18 conflicts: 12 reduce/reduce
State 19 conflicts: 12 reduce/reduce
State 20 conflicts: 12 reduce/reduce
State 22 conflicts: 13 reduce/reduce
State 23 conflicts: 13 reduce/reduce
State 24 conflicts: 13 reduce/reduce
State 28 conflicts: 12 reduce/reduce
State 29 conflicts: 13 reduce/reduce
State 41 conflicts: 1 reduce/reduce
State 47 conflicts: 13 reduce/reduce
State 52 conflicts: 13 reduce/reduce
State 53 conflicts: 1 shift/reduce, 2 reduce/reduce
State 54 conflicts: 16 reduce/reduce
State 55 conflicts: 16 reduce/reduce
State 56 conflicts: 16 reduce/reduce
State 57 conflicts: 16 reduce/reduce
State 58 conflicts: 16 reduce/reduce
State 59 conflicts: 16 reduce/reduce
State 60 conflicts: 16 reduce/reduce
State 61 conflicts: 16 reduce/reduce
State 62 conflicts: 16 reduce/reduce
State 63 conflicts: 16 reduce/reduce
State 64 conflicts: 16 reduce/reduce
State 65 conflicts: 12 reduce/reduce
State 66 conflicts: 1 shift/reduce, 2 reduce/reduce
State 71 conflicts: 14 reduce/reduce
State 92 conflicts: 1 shift/reduce, 1 reduce/reduce
State 96 conflicts: 1 shift/reduce, 2 reduce/reduce
State 97 conflicts: 12 reduce/reduce
State 98 conflicts: 2 reduce/reduce
State 99 conflicts: 11 reduce/reduce
State 107 conflicts: 10 shift/reduce, 2 reduce/reduce
State 108 conflicts: 11 reduce/reduce
State 110 conflicts: 1 shift/reduce, 2 reduce/reduce
State 114 conflicts: 12 reduce/reduce
State 117 conflicts: 10 shift/reduce, 2 reduce/reduce


Grammar

    0 $accept: program $end

    1 primtype: /* empty */
    2         | TYPE
    3         | LIST LTGEN primtype GTGEN

    4 program: /* empty */
    5        | /* empty */
    6        | program stmt SEMI
    7        | program func_decl

    8 datatype_list: /* empty */
    9              | datatype_list COMMA primtype
   10              | primtype
   11              | /* empty */

   12 return_type: /* empty */
   13            | primtype
   14            | LPAREN datatype_list RPAREN

   15 func_decl: /* empty */
   16          | FUNC ID LPAREN arguments RPAREN return_type LBRACE fstmt_list RBRACE
   17          | FUNC ID LPAREN arguments RPAREN LBRACE fstmt_list RBRACE

   18 arguments: /* empty */
   19          | /* empty */
   20          | formal_list

   21 formal_list: /* empty */
   22            | primtype ID
   23            | formal_list COMMA primtype ID

   24 var_decl: /* empty */
   25         | primtype ID
   26         | primtype ID ASSIGN expr

   27 fstmt_list: /* empty */
   28           | /* empty */
   29           | fstmt_list func_stmt

   30 func_stmt: /* empty */
   31          | RETURN expr SEMI
   32          | stmt SEMI

   33 stmt: /* empty */
   34     | print
   35     | var_decl
   36     | ID ASSIGN expr
   37     | IF LPAREN expr RPAREN stmt
   38     | IF LPAREN expr RPAREN stmt ELSE stmt
   39     | FOR LPAREN expr_opt SEMI expr_opt SEMI expr_opt RPAREN stmt
   40     | WHILE LPAREN expr RPAREN stmt

   41 print: /* empty */
   42      | PRINTLN LPAREN expression_list RPAREN
   43      | PRINTF LPAREN expression_list RPAREN

   44 expr_opt: /* empty */
   45         | /* empty */
   46         | expr

   47 lit: /* empty */
   48    | INT_VAL
   49    | BOOL_LIT
   50    | STRING_LIT
   51    | FLOAT_LIT

   52 fcall: /* empty */
   53      | ID LPAREN expression_list_opt RPAREN

   54 expr: /* empty */
   55     | lit
   56     | ID
   57     | expr PLUS expr
   58     | expr MINUS expr
   59     | expr TIMES expr
   60     | expr DIVIDE expr
   61     | expr EQ expr
   62     | expr NEQ expr
   63     | expr LT expr
   64     | expr LEQ expr
   65     | expr GT expr
   66     | expr GEQ expr
   67     | expr CASTBOOL expr
   68     | fcall
   69     | LPAREN expr RPAREN
   70     | LBRACKET expression_list_opt RBRACKET

   71 expression_list: /* empty */
   72                | expression_list_internal

   73 expression_list_opt: /* empty */
   74                    | /* empty */
   75                    | expression_list

   76 expression_list_internal: /* empty */
   77                         | expr
   78                         | expression_list_internal COMMA expr


Terminals, with rules where they appear

$end (0) 0
error (256)
SEMI (258) 6 31 32 39
LPAREN (259) 14 16 17 37 38 39 40 42 43 53 69
RPAREN (260) 14 16 17 37 38 39 40 42 43 53 69
LBRACE (261) 16 17
RBRACE (262) 16 17
COMMA (263) 9 23 78
LBRACKET (264) 70
RBRACKET (265) 70
LTGEN (266) 3
GTGEN (267) 3
LIST (268) 3
PLUS (269) 57
MINUS (270) 58
TIMES (271) 59
DIVIDE (272) 60
ASSIGN (273) 26 36
CASTBOOL (274) 67
EQ (275) 61
NEQ (276) 62
LT (277) 63
LEQ (278) 64
GT (279) 65
GEQ (280) 66
RETURN (281) 31
IF (282) 37 38
ELSE (283) 38
FOR (284) 39
WHILE (285) 40
FUNC (286) 16 17
IN (287)
PRINTLN (288) 42
PRINTF (289) 43
ID (290) 16 17 22 23 25 26 36 53 56
TYPE (291) 2
STRING_LIT (292) 50
INT_VAL (293) 48
FLOAT_LIT (294) 51
BOOL_LIT (295) 49
EOF (296)
NOELSE (297)


Nonterminals, with rules where they appear

$accept (43)
    on left: 0
primtype (44)
    on left: 1 2 3, on right: 3 9 10 13 22 23 25 26
program (45)
    on left: 4 5 6 7, on right: 0 6 7
datatype_list (46)
    on left: 8 9 10 11, on right: 9 14
return_type (47)
    on left: 12 13 14, on right: 16
func_decl (48)
    on left: 15 16 17, on right: 7
arguments (49)
    on left: 18 19 20, on right: 16 17
formal_list (50)
    on left: 21 22 23, on right: 20 23
var_decl (51)
    on left: 24 25 26, on right: 35
fstmt_list (52)
    on left: 27 28 29, on right: 16 17 29
func_stmt (53)
    on left: 30 31 32, on right: 29
stmt (54)
    on left: 33 34 35 36 37 38 39 40, on right: 6 32 37 38 39 40
print (55)
    on left: 41 42 43, on right: 34
expr_opt (56)
    on left: 44 45 46, on right: 39
lit (57)
    on left: 47 48 49 50 51, on right: 55
fcall (58)
    on left: 52 53, on right: 68
expr (59)
    on left: 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70,
    on right: 26 31 36 37 38 40 46 57 58 59 60 61 62 63 64 65 66 67
    69 77 78
expression_list (60)
    on left: 71 72, on right: 42 43 75
expression_list_opt (61)
    on left: 73 74 75, on right: 53 70
expression_list_internal (62)
    on left: 76 77 78, on right: 72 78


state 0

    0 $accept: . program $end

    $end      reduce using rule 4 (program)
    $end      [reduce using rule 5 (program)]
    SEMI      reduce using rule 4 (program)
    SEMI      [reduce using rule 5 (program)]
    LIST      reduce using rule 4 (program)
    LIST      [reduce using rule 5 (program)]
    IF        reduce using rule 4 (program)
    IF        [reduce using rule 5 (program)]
    FOR       reduce using rule 4 (program)
    FOR       [reduce using rule 5 (program)]
    WHILE     reduce using rule 4 (program)
    WHILE     [reduce using rule 5 (program)]
    FUNC      reduce using rule 4 (program)
    FUNC      [reduce using rule 5 (program)]
    PRINTLN   reduce using rule 4 (program)
    PRINTLN   [reduce using rule 5 (program)]
    PRINTF    reduce using rule 4 (program)
    PRINTF    [reduce using rule 5 (program)]
    ID        reduce using rule 4 (program)
    ID        [reduce using rule 5 (program)]
    TYPE      reduce using rule 4 (program)
    TYPE      [reduce using rule 5 (program)]
    $default  reduce using rule 4 (program)

    program  go to state 1


state 1

    0 $accept: program . $end
    6 program: program . stmt SEMI
    7        | program . func_decl

    $end     shift, and go to state 2
    LIST     shift, and go to state 3
    IF       shift, and go to state 4
    FOR      shift, and go to state 5
    WHILE    shift, and go to state 6
    FUNC     shift, and go to state 7
    PRINTLN  shift, and go to state 8
    PRINTF   shift, and go to state 9
    ID       shift, and go to state 10
    TYPE     shift, and go to state 11

    $end      [reduce using rule 15 (func_decl)]
    SEMI      reduce using rule 15 (func_decl)
    SEMI      [reduce using rule 24 (var_decl)]
    SEMI      [reduce using rule 33 (stmt)]
    SEMI      [reduce using rule 41 (print)]
    LIST      [reduce using rule 15 (func_decl)]
    IF        [reduce using rule 15 (func_decl)]
    FOR       [reduce using rule 15 (func_decl)]
    WHILE     [reduce using rule 15 (func_decl)]
    FUNC      [reduce using rule 15 (func_decl)]
    PRINTLN   [reduce using rule 15 (func_decl)]
    PRINTF    [reduce using rule 15 (func_decl)]
    ID        [reduce using rule 1 (primtype)]
    ID        [reduce using rule 15 (func_decl)]
    TYPE      [reduce using rule 15 (func_decl)]
    $default  reduce using rule 15 (func_decl)

    primtype   go to state 12
    func_decl  go to state 13
    var_decl   go to state 14
    stmt       go to state 15
    print      go to state 16


state 2

    0 $accept: program $end .

    $default  accept


state 3

    3 primtype: LIST . LTGEN primtype GTGEN

    LTGEN  shift, and go to state 17


state 4

   37 stmt: IF . LPAREN expr RPAREN stmt
   38     | IF . LPAREN expr RPAREN stmt ELSE stmt

    LPAREN  shift, and go to state 18


state 5

   39 stmt: FOR . LPAREN expr_opt SEMI expr_opt SEMI expr_opt RPAREN stmt

    LPAREN  shift, and go to state 19


state 6

   40 stmt: WHILE . LPAREN expr RPAREN stmt

    LPAREN  shift, and go to state 20


state 7

   16 func_decl: FUNC . ID LPAREN arguments RPAREN return_type LBRACE fstmt_list RBRACE
   17          | FUNC . ID LPAREN arguments RPAREN LBRACE fstmt_list RBRACE

    ID  shift, and go to state 21


state 8

   42 print: PRINTLN . LPAREN expression_list RPAREN

    LPAREN  shift, and go to state 22


state 9

   43 print: PRINTF . LPAREN expression_list RPAREN

    LPAREN  shift, and go to state 23


state 10

   36 stmt: ID . ASSIGN expr

    ASSIGN  shift, and go to state 24


state 11

    2 primtype: TYPE .

    $default  reduce using rule 2 (primtype)


state 12

   25 var_decl: primtype . ID
   26         | primtype . ID ASSIGN expr

    ID  shift, and go to state 25


state 13

    7 program: program func_decl .

    $default  reduce using rule 7 (program)


state 14

   35 stmt: var_decl .

    $default  reduce using rule 35 (stmt)


state 15

    6 program: program stmt . SEMI

    SEMI  shift, and go to state 26


state 16

   34 stmt: print .

    $default  reduce using rule 34 (stmt)


state 17

    3 primtype: LIST LTGEN . primtype GTGEN

    LIST  shift, and go to state 3
    TYPE  shift, and go to state 11

    $default  reduce using rule 1 (primtype)

    primtype  go to state 27


state 18

   37 stmt: IF LPAREN . expr RPAREN stmt
   38     | IF LPAREN . expr RPAREN stmt ELSE stmt

    LPAREN      shift, and go to state 28
    LBRACKET    shift, and go to state 29
    ID          shift, and go to state 30
    STRING_LIT  shift, and go to state 31
    INT_VAL     shift, and go to state 32
    FLOAT_LIT   shift, and go to state 33
    BOOL_LIT    shift, and go to state 34

    RPAREN    reduce using rule 47 (lit)
    RPAREN    [reduce using rule 52 (fcall)]
    RPAREN    [reduce using rule 54 (expr)]
    PLUS      reduce using rule 47 (lit)
    PLUS      [reduce using rule 52 (fcall)]
    PLUS      [reduce using rule 54 (expr)]
    MINUS     reduce using rule 47 (lit)
    MINUS     [reduce using rule 52 (fcall)]
    MINUS     [reduce using rule 54 (expr)]
    TIMES     reduce using rule 47 (lit)
    TIMES     [reduce using rule 52 (fcall)]
    TIMES     [reduce using rule 54 (expr)]
    DIVIDE    reduce using rule 47 (lit)
    DIVIDE    [reduce using rule 52 (fcall)]
    DIVIDE    [reduce using rule 54 (expr)]
    CASTBOOL  reduce using rule 47 (lit)
    CASTBOOL  [reduce using rule 52 (fcall)]
    CASTBOOL  [reduce using rule 54 (expr)]
    EQ        reduce using rule 47 (lit)
    EQ        [reduce using rule 52 (fcall)]
    EQ        [reduce using rule 54 (expr)]
    NEQ       reduce using rule 47 (lit)
    NEQ       [reduce using rule 52 (fcall)]
    NEQ       [reduce using rule 54 (expr)]
    LT        reduce using rule 47 (lit)
    LT        [reduce using rule 52 (fcall)]
    LT        [reduce using rule 54 (expr)]
    LEQ       reduce using rule 47 (lit)
    LEQ       [reduce using rule 52 (fcall)]
    LEQ       [reduce using rule 54 (expr)]
    GT        reduce using rule 47 (lit)
    GT        [reduce using rule 52 (fcall)]
    GT        [reduce using rule 54 (expr)]
    GEQ       reduce using rule 47 (lit)
    GEQ       [reduce using rule 52 (fcall)]
    GEQ       [reduce using rule 54 (expr)]
    $default  reduce using rule 47 (lit)

    lit    go to state 35
    fcall  go to state 36
    expr   go to state 37


state 19

   39 stmt: FOR LPAREN . expr_opt SEMI expr_opt SEMI expr_opt RPAREN stmt

    LPAREN      shift, and go to state 28
    LBRACKET    shift, and go to state 29
    ID          shift, and go to state 30
    STRING_LIT  shift, and go to state 31
    INT_VAL     shift, and go to state 32
    FLOAT_LIT   shift, and go to state 33
    BOOL_LIT    shift, and go to state 34

    SEMI      reduce using rule 44 (expr_opt)
    SEMI      [reduce using rule 45 (expr_opt)]
    SEMI      [reduce using rule 47 (lit)]
    SEMI      [reduce using rule 52 (fcall)]
    SEMI      [reduce using rule 54 (expr)]
    PLUS      reduce using rule 47 (lit)
    PLUS      [reduce using rule 52 (fcall)]
    PLUS      [reduce using rule 54 (expr)]
    MINUS     reduce using rule 47 (lit)
    MINUS     [reduce using rule 52 (fcall)]
    MINUS     [reduce using rule 54 (expr)]
    TIMES     reduce using rule 47 (lit)
    TIMES     [reduce using rule 52 (fcall)]
    TIMES     [reduce using rule 54 (expr)]
    DIVIDE    reduce using rule 47 (lit)
    DIVIDE    [reduce using rule 52 (fcall)]
    DIVIDE    [reduce using rule 54 (expr)]
    CASTBOOL  reduce using rule 47 (lit)
    CASTBOOL  [reduce using rule 52 (fcall)]
    CASTBOOL  [reduce using rule 54 (expr)]
    EQ        reduce using rule 47 (lit)
    EQ        [reduce using rule 52 (fcall)]
    EQ        [reduce using rule 54 (expr)]
    NEQ       reduce using rule 47 (lit)
    NEQ       [reduce using rule 52 (fcall)]
    NEQ       [reduce using rule 54 (expr)]
    LT        reduce using rule 47 (lit)
    LT        [reduce using rule 52 (fcall)]
    LT        [reduce using rule 54 (expr)]
    LEQ       reduce using rule 47 (lit)
    LEQ       [reduce using rule 52 (fcall)]
    LEQ       [reduce using rule 54 (expr)]
    GT        reduce using rule 47 (lit)
    GT        [reduce using rule 52 (fcall)]
    GT        [reduce using rule 54 (expr)]
    GEQ       reduce using rule 47 (lit)
    GEQ       [reduce using rule 52 (fcall)]
    GEQ       [reduce using rule 54 (expr)]
    $default  reduce using rule 47 (lit)

    expr_opt  go to state 38
    lit       go to state 35
    fcall     go to state 36
    expr      go to state 39


state 20

   40 stmt: WHILE LPAREN . expr RPAREN stmt

    LPAREN      shift, and go to state 28
    LBRACKET    shift, and go to state 29
    ID          shift, and go to state 30
    STRING_LIT  shift, and go to state 31
    INT_VAL     shift, and go to state 32
    FLOAT_LIT   shift, and go to state 33
    BOOL_LIT    shift, and go to state 34

    RPAREN    reduce using rule 47 (lit)
    RPAREN    [reduce using rule 52 (fcall)]
    RPAREN    [reduce using rule 54 (expr)]
    PLUS      reduce using rule 47 (lit)
    PLUS      [reduce using rule 52 (fcall)]
    PLUS      [reduce using rule 54 (expr)]
    MINUS     reduce using rule 47 (lit)
    MINUS     [reduce using rule 52 (fcall)]
    MINUS     [reduce using rule 54 (expr)]
    TIMES     reduce using rule 47 (lit)
    TIMES     [reduce using rule 52 (fcall)]
    TIMES     [reduce using rule 54 (expr)]
    DIVIDE    reduce using rule 47 (lit)
    DIVIDE    [reduce using rule 52 (fcall)]
    DIVIDE    [reduce using rule 54 (expr)]
    CASTBOOL  reduce using rule 47 (lit)
    CASTBOOL  [reduce using rule 52 (fcall)]
    CASTBOOL  [reduce using rule 54 (expr)]
    EQ        reduce using rule 47 (lit)
    EQ        [reduce using rule 52 (fcall)]
    EQ        [reduce using rule 54 (expr)]
    NEQ       reduce using rule 47 (lit)
    NEQ       [reduce using rule 52 (fcall)]
    NEQ       [reduce using rule 54 (expr)]
    LT        reduce using rule 47 (lit)
    LT        [reduce using rule 52 (fcall)]
    LT        [reduce using rule 54 (expr)]
    LEQ       reduce using rule 47 (lit)
    LEQ       [reduce using rule 52 (fcall)]
    LEQ       [reduce using rule 54 (expr)]
    GT        reduce using rule 47 (lit)
    GT        [reduce using rule 52 (fcall)]
    GT        [reduce using rule 54 (expr)]
    GEQ       reduce using rule 47 (lit)
    GEQ       [reduce using rule 52 (fcall)]
    GEQ       [reduce using rule 54 (expr)]
    $default  reduce using rule 47 (lit)

    lit    go to state 35
    fcall  go to state 36
    expr   go to state 40


state 21

   16 func_decl: FUNC ID . LPAREN arguments RPAREN return_type LBRACE fstmt_list RBRACE
   17          | FUNC ID . LPAREN arguments RPAREN LBRACE fstmt_list RBRACE

    LPAREN  shift, and go to state 41


state 22

   42 print: PRINTLN LPAREN . expression_list RPAREN

    LPAREN      shift, and go to state 28
    LBRACKET    shift, and go to state 29
    ID          shift, and go to state 30
    STRING_LIT  shift, and go to state 31
    INT_VAL     shift, and go to state 32
    FLOAT_LIT   shift, and go to state 33
    BOOL_LIT    shift, and go to state 34

    RPAREN    reduce using rule 47 (lit)
    RPAREN    [reduce using rule 52 (fcall)]
    RPAREN    [reduce using rule 54 (expr)]
    RPAREN    [reduce using rule 71 (expression_list)]
    RPAREN    [reduce using rule 76 (expression_list_internal)]
    COMMA     reduce using rule 47 (lit)
    COMMA     [reduce using rule 52 (fcall)]
    COMMA     [reduce using rule 54 (expr)]
    COMMA     [reduce using rule 76 (expression_list_internal)]
    PLUS      reduce using rule 47 (lit)
    PLUS      [reduce using rule 52 (fcall)]
    PLUS      [reduce using rule 54 (expr)]
    MINUS     reduce using rule 47 (lit)
    MINUS     [reduce using rule 52 (fcall)]
    MINUS     [reduce using rule 54 (expr)]
    TIMES     reduce using rule 47 (lit)
    TIMES     [reduce using rule 52 (fcall)]
    TIMES     [reduce using rule 54 (expr)]
    DIVIDE    reduce using rule 47 (lit)
    DIVIDE    [reduce using rule 52 (fcall)]
    DIVIDE    [reduce using rule 54 (expr)]
    CASTBOOL  reduce using rule 47 (lit)
    CASTBOOL  [reduce using rule 52 (fcall)]
    CASTBOOL  [reduce using rule 54 (expr)]
    EQ        reduce using rule 47 (lit)
    EQ        [reduce using rule 52 (fcall)]
    EQ        [reduce using rule 54 (expr)]
    NEQ       reduce using rule 47 (lit)
    NEQ       [reduce using rule 52 (fcall)]
    NEQ       [reduce using rule 54 (expr)]
    LT        reduce using rule 47 (lit)
    LT        [reduce using rule 52 (fcall)]
    LT        [reduce using rule 54 (expr)]
    LEQ       reduce using rule 47 (lit)
    LEQ       [reduce using rule 52 (fcall)]
    LEQ       [reduce using rule 54 (expr)]
    GT        reduce using rule 47 (lit)
    GT        [reduce using rule 52 (fcall)]
    GT        [reduce using rule 54 (expr)]
    GEQ       reduce using rule 47 (lit)
    GEQ       [reduce using rule 52 (fcall)]
    GEQ       [reduce using rule 54 (expr)]
    $default  reduce using rule 47 (lit)

    lit                       go to state 35
    fcall                     go to state 36
    expr                      go to state 42
    expression_list           go to state 43
    expression_list_internal  go to state 44


state 23

   43 print: PRINTF LPAREN . expression_list RPAREN

    LPAREN      shift, and go to state 28
    LBRACKET    shift, and go to state 29
    ID          shift, and go to state 30
    STRING_LIT  shift, and go to state 31
    INT_VAL     shift, and go to state 32
    FLOAT_LIT   shift, and go to state 33
    BOOL_LIT    shift, and go to state 34

    RPAREN    reduce using rule 47 (lit)
    RPAREN    [reduce using rule 52 (fcall)]
    RPAREN    [reduce using rule 54 (expr)]
    RPAREN    [reduce using rule 71 (expression_list)]
    RPAREN    [reduce using rule 76 (expression_list_internal)]
    COMMA     reduce using rule 47 (lit)
    COMMA     [reduce using rule 52 (fcall)]
    COMMA     [reduce using rule 54 (expr)]
    COMMA     [reduce using rule 76 (expression_list_internal)]
    PLUS      reduce using rule 47 (lit)
    PLUS      [reduce using rule 52 (fcall)]
    PLUS      [reduce using rule 54 (expr)]
    MINUS     reduce using rule 47 (lit)
    MINUS     [reduce using rule 52 (fcall)]
    MINUS     [reduce using rule 54 (expr)]
    TIMES     reduce using rule 47 (lit)
    TIMES     [reduce using rule 52 (fcall)]
    TIMES     [reduce using rule 54 (expr)]
    DIVIDE    reduce using rule 47 (lit)
    DIVIDE    [reduce using rule 52 (fcall)]
    DIVIDE    [reduce using rule 54 (expr)]
    CASTBOOL  reduce using rule 47 (lit)
    CASTBOOL  [reduce using rule 52 (fcall)]
    CASTBOOL  [reduce using rule 54 (expr)]
    EQ        reduce using rule 47 (lit)
    EQ        [reduce using rule 52 (fcall)]
    EQ        [reduce using rule 54 (expr)]
    NEQ       reduce using rule 47 (lit)
    NEQ       [reduce using rule 52 (fcall)]
    NEQ       [reduce using rule 54 (expr)]
    LT        reduce using rule 47 (lit)
    LT        [reduce using rule 52 (fcall)]
    LT        [reduce using rule 54 (expr)]
    LEQ       reduce using rule 47 (lit)
    LEQ       [reduce using rule 52 (fcall)]
    LEQ       [reduce using rule 54 (expr)]
    GT        reduce using rule 47 (lit)
    GT        [reduce using rule 52 (fcall)]
    GT        [reduce using rule 54 (expr)]
    GEQ       reduce using rule 47 (lit)
    GEQ       [reduce using rule 52 (fcall)]
    GEQ       [reduce using rule 54 (expr)]
    $default  reduce using rule 47 (lit)

    lit                       go to state 35
    fcall                     go to state 36
    expr                      go to state 42
    expression_list           go to state 45
    expression_list_internal  go to state 44


state 24

   36 stmt: ID ASSIGN . expr

    LPAREN      shift, and go to state 28
    LBRACKET    shift, and go to state 29
    ID          shift, and go to state 30
    STRING_LIT  shift, and go to state 31
    INT_VAL     shift, and go to state 32
    FLOAT_LIT   shift, and go to state 33
    BOOL_LIT    shift, and go to state 34

    SEMI      reduce using rule 47 (lit)
    SEMI      [reduce using rule 52 (fcall)]
    SEMI      [reduce using rule 54 (expr)]
    PLUS      reduce using rule 47 (lit)
    PLUS      [reduce using rule 52 (fcall)]
    PLUS      [reduce using rule 54 (expr)]
    MINUS     reduce using rule 47 (lit)
    MINUS     [reduce using rule 52 (fcall)]
    MINUS     [reduce using rule 54 (expr)]
    TIMES     reduce using rule 47 (lit)
    TIMES     [reduce using rule 52 (fcall)]
    TIMES     [reduce using rule 54 (expr)]
    DIVIDE    reduce using rule 47 (lit)
    DIVIDE    [reduce using rule 52 (fcall)]
    DIVIDE    [reduce using rule 54 (expr)]
    CASTBOOL  reduce using rule 47 (lit)
    CASTBOOL  [reduce using rule 52 (fcall)]
    CASTBOOL  [reduce using rule 54 (expr)]
    EQ        reduce using rule 47 (lit)
    EQ        [reduce using rule 52 (fcall)]
    EQ        [reduce using rule 54 (expr)]
    NEQ       reduce using rule 47 (lit)
    NEQ       [reduce using rule 52 (fcall)]
    NEQ       [reduce using rule 54 (expr)]
    LT        reduce using rule 47 (lit)
    LT        [reduce using rule 52 (fcall)]
    LT        [reduce using rule 54 (expr)]
    LEQ       reduce using rule 47 (lit)
    LEQ       [reduce using rule 52 (fcall)]
    LEQ       [reduce using rule 54 (expr)]
    GT        reduce using rule 47 (lit)
    GT        [reduce using rule 52 (fcall)]
    GT        [reduce using rule 54 (expr)]
    GEQ       reduce using rule 47 (lit)
    GEQ       [reduce using rule 52 (fcall)]
    GEQ       [reduce using rule 54 (expr)]
    ELSE      reduce using rule 47 (lit)
    ELSE      [reduce using rule 52 (fcall)]
    ELSE      [reduce using rule 54 (expr)]
    $default  reduce using rule 47 (lit)

    lit    go to state 35
    fcall  go to state 36
    expr   go to state 46


state 25

   25 var_decl: primtype ID .
   26         | primtype ID . ASSIGN expr

    ASSIGN  shift, and go to state 47

    $default  reduce using rule 25 (var_decl)


state 26

    6 program: program stmt SEMI .

    $default  reduce using rule 6 (program)


state 27

    3 primtype: LIST LTGEN primtype . GTGEN

    GTGEN  shift, and go to state 48


state 28

   69 expr: LPAREN . expr RPAREN

    LPAREN      shift, and go to state 28
    LBRACKET    shift, and go to state 29
    ID          shift, and go to state 30
    STRING_LIT  shift, and go to state 31
    INT_VAL     shift, and go to state 32
    FLOAT_LIT   shift, and go to state 33
    BOOL_LIT    shift, and go to state 34

    RPAREN    reduce using rule 47 (lit)
    RPAREN    [reduce using rule 52 (fcall)]
    RPAREN    [reduce using rule 54 (expr)]
    PLUS      reduce using rule 47 (lit)
    PLUS      [reduce using rule 52 (fcall)]
    PLUS      [reduce using rule 54 (expr)]
    MINUS     reduce using rule 47 (lit)
    MINUS     [reduce using rule 52 (fcall)]
    MINUS     [reduce using rule 54 (expr)]
    TIMES     reduce using rule 47 (lit)
    TIMES     [reduce using rule 52 (fcall)]
    TIMES     [reduce using rule 54 (expr)]
    DIVIDE    reduce using rule 47 (lit)
    DIVIDE    [reduce using rule 52 (fcall)]
    DIVIDE    [reduce using rule 54 (expr)]
    CASTBOOL  reduce using rule 47 (lit)
    CASTBOOL  [reduce using rule 52 (fcall)]
    CASTBOOL  [reduce using rule 54 (expr)]
    EQ        reduce using rule 47 (lit)
    EQ        [reduce using rule 52 (fcall)]
    EQ        [reduce using rule 54 (expr)]
    NEQ       reduce using rule 47 (lit)
    NEQ       [reduce using rule 52 (fcall)]
    NEQ       [reduce using rule 54 (expr)]
    LT        reduce using rule 47 (lit)
    LT        [reduce using rule 52 (fcall)]
    LT        [reduce using rule 54 (expr)]
    LEQ       reduce using rule 47 (lit)
    LEQ       [reduce using rule 52 (fcall)]
    LEQ       [reduce using rule 54 (expr)]
    GT        reduce using rule 47 (lit)
    GT        [reduce using rule 52 (fcall)]
    GT        [reduce using rule 54 (expr)]
    GEQ       reduce using rule 47 (lit)
    GEQ       [reduce using rule 52 (fcall)]
    GEQ       [reduce using rule 54 (expr)]
    $default  reduce using rule 47 (lit)

    lit    go to state 35
    fcall  go to state 36
    expr   go to state 49


state 29

   70 expr: LBRACKET . expression_list_opt RBRACKET

    LPAREN      shift, and go to state 28
    LBRACKET    shift, and go to state 29
    ID          shift, and go to state 30
    STRING_LIT  shift, and go to state 31
    INT_VAL     shift, and go to state 32
    FLOAT_LIT   shift, and go to state 33
    BOOL_LIT    shift, and go to state 34

    COMMA     reduce using rule 47 (lit)
    COMMA     [reduce using rule 52 (fcall)]
    COMMA     [reduce using rule 54 (expr)]
    COMMA     [reduce using rule 76 (expression_list_internal)]
    RBRACKET  reduce using rule 47 (lit)
    RBRACKET  [reduce using rule 52 (fcall)]
    RBRACKET  [reduce using rule 54 (expr)]
    RBRACKET  [reduce using rule 71 (expression_list)]
    RBRACKET  [reduce using rule 73 (expression_list_opt)]
    RBRACKET  [reduce using rule 74 (expression_list_opt)]
    RBRACKET  [reduce using rule 76 (expression_list_internal)]
    PLUS      reduce using rule 47 (lit)
    PLUS      [reduce using rule 52 (fcall)]
    PLUS      [reduce using rule 54 (expr)]
    MINUS     reduce using rule 47 (lit)
    MINUS     [reduce using rule 52 (fcall)]
    MINUS     [reduce using rule 54 (expr)]
    TIMES     reduce using rule 47 (lit)
    TIMES     [reduce using rule 52 (fcall)]
    TIMES     [reduce using rule 54 (expr)]
    DIVIDE    reduce using rule 47 (lit)
    DIVIDE    [reduce using rule 52 (fcall)]
    DIVIDE    [reduce using rule 54 (expr)]
    CASTBOOL  reduce using rule 47 (lit)
    CASTBOOL  [reduce using rule 52 (fcall)]
    CASTBOOL  [reduce using rule 54 (expr)]
    EQ        reduce using rule 47 (lit)
    EQ        [reduce using rule 52 (fcall)]
    EQ        [reduce using rule 54 (expr)]
    NEQ       reduce using rule 47 (lit)
    NEQ       [reduce using rule 52 (fcall)]
    NEQ       [reduce using rule 54 (expr)]
    LT        reduce using rule 47 (lit)
    LT        [reduce using rule 52 (fcall)]
    LT        [reduce using rule 54 (expr)]
    LEQ       reduce using rule 47 (lit)
    LEQ       [reduce using rule 52 (fcall)]
    LEQ       [reduce using rule 54 (expr)]
    GT        reduce using rule 47 (lit)
    GT        [reduce using rule 52 (fcall)]
    GT        [reduce using rule 54 (expr)]
    GEQ       reduce using rule 47 (lit)
    GEQ       [reduce using rule 52 (fcall)]
    GEQ       [reduce using rule 54 (expr)]
    $default  reduce using rule 47 (lit)

    lit                       go to state 35
    fcall                     go to state 36
    expr                      go to state 42
    expression_list           go to state 50
    expression_list_opt       go to state 51
    expression_list_internal  go to state 44


state 30

   53 fcall: ID . LPAREN expression_list_opt RPAREN
   56 expr: ID .

    LPAREN  shift, and go to state 52

    $default  reduce using rule 56 (expr)


state 31

   50 lit: STRING_LIT .

    $default  reduce using rule 50 (lit)


state 32

   48 lit: INT_VAL .

    $default  reduce using rule 48 (lit)


state 33

   51 lit: FLOAT_LIT .

    $default  reduce using rule 51 (lit)


state 34

   49 lit: BOOL_LIT .

    $default  reduce using rule 49 (lit)


state 35

   55 expr: lit .

    $default  reduce using rule 55 (expr)


state 36

   68 expr: fcall .

    $default  reduce using rule 68 (expr)


state 37

   37 stmt: IF LPAREN expr . RPAREN stmt
   38     | IF LPAREN expr . RPAREN stmt ELSE stmt
   57 expr: expr . PLUS expr
   58     | expr . MINUS expr
   59     | expr . TIMES expr
   60     | expr . DIVIDE expr
   61     | expr . EQ expr
   62     | expr . NEQ expr
   63     | expr . LT expr
   64     | expr . LEQ expr
   65     | expr . GT expr
   66     | expr . GEQ expr
   67     | expr . CASTBOOL expr

    RPAREN    shift, and go to state 53
    PLUS      shift, and go to state 54
    MINUS     shift, and go to state 55
    TIMES     shift, and go to state 56
    DIVIDE    shift, and go to state 57
    CASTBOOL  shift, and go to state 58
    EQ        shift, and go to state 59
    NEQ       shift, and go to state 60
    LT        shift, and go to state 61
    LEQ       shift, and go to state 62
    GT        shift, and go to state 63
    GEQ       shift, and go to state 64


state 38

   39 stmt: FOR LPAREN expr_opt . SEMI expr_opt SEMI expr_opt RPAREN stmt

    SEMI  shift, and go to state 65


state 39

   46 expr_opt: expr .
   57 expr: expr . PLUS expr
   58     | expr . MINUS expr
   59     | expr . TIMES expr
   60     | expr . DIVIDE expr
   61     | expr . EQ expr
   62     | expr . NEQ expr
   63     | expr . LT expr
   64     | expr . LEQ expr
   65     | expr . GT expr
   66     | expr . GEQ expr
   67     | expr . CASTBOOL expr

    PLUS      shift, and go to state 54
    MINUS     shift, and go to state 55
    TIMES     shift, and go to state 56
    DIVIDE    shift, and go to state 57
    CASTBOOL  shift, and go to state 58
    EQ        shift, and go to state 59
    NEQ       shift, and go to state 60
    LT        shift, and go to state 61
    LEQ       shift, and go to state 62
    GT        shift, and go to state 63
    GEQ       shift, and go to state 64

    $default  reduce using rule 46 (expr_opt)


state 40

   40 stmt: WHILE LPAREN expr . RPAREN stmt
   57 expr: expr . PLUS expr
   58     | expr . MINUS expr
   59     | expr . TIMES expr
   60     | expr . DIVIDE expr
   61     | expr . EQ expr
   62     | expr . NEQ expr
   63     | expr . LT expr
   64     | expr . LEQ expr
   65     | expr . GT expr
   66     | expr . GEQ expr
   67     | expr . CASTBOOL expr

    RPAREN    shift, and go to state 66
    PLUS      shift, and go to state 54
    MINUS     shift, and go to state 55
    TIMES     shift, and go to state 56
    DIVIDE    shift, and go to state 57
    CASTBOOL  shift, and go to state 58
    EQ        shift, and go to state 59
    NEQ       shift, and go to state 60
    LT        shift, and go to state 61
    LEQ       shift, and go to state 62
    GT        shift, and go to state 63
    GEQ       shift, and go to state 64


state 41

   16 func_decl: FUNC ID LPAREN . arguments RPAREN return_type LBRACE fstmt_list RBRACE
   17          | FUNC ID LPAREN . arguments RPAREN LBRACE fstmt_list RBRACE

    LIST  shift, and go to state 3
    TYPE  shift, and go to state 11

    RPAREN    reduce using rule 18 (arguments)
    RPAREN    [reduce using rule 19 (arguments)]
    RPAREN    [reduce using rule 21 (formal_list)]
    COMMA     reduce using rule 21 (formal_list)
    $default  reduce using rule 1 (primtype)

    primtype     go to state 67
    arguments    go to state 68
    formal_list  go to state 69


state 42

   57 expr: expr . PLUS expr
   58     | expr . MINUS expr
   59     | expr . TIMES expr
   60     | expr . DIVIDE expr
   61     | expr . EQ expr
   62     | expr . NEQ expr
   63     | expr . LT expr
   64     | expr . LEQ expr
   65     | expr . GT expr
   66     | expr . GEQ expr
   67     | expr . CASTBOOL expr
   77 expression_list_internal: expr .

    PLUS      shift, and go to state 54
    MINUS     shift, and go to state 55
    TIMES     shift, and go to state 56
    DIVIDE    shift, and go to state 57
    CASTBOOL  shift, and go to state 58
    EQ        shift, and go to state 59
    NEQ       shift, and go to state 60
    LT        shift, and go to state 61
    LEQ       shift, and go to state 62
    GT        shift, and go to state 63
    GEQ       shift, and go to state 64

    $default  reduce using rule 77 (expression_list_internal)


state 43

   42 print: PRINTLN LPAREN expression_list . RPAREN

    RPAREN  shift, and go to state 70


state 44

   72 expression_list: expression_list_internal .
   78 expression_list_internal: expression_list_internal . COMMA expr

    COMMA  shift, and go to state 71

    $default  reduce using rule 72 (expression_list)


state 45

   43 print: PRINTF LPAREN expression_list . RPAREN

    RPAREN  shift, and go to state 72


state 46

   36 stmt: ID ASSIGN expr .
   57 expr: expr . PLUS expr
   58     | expr . MINUS expr
   59     | expr . TIMES expr
   60     | expr . DIVIDE expr
   61     | expr . EQ expr
   62     | expr . NEQ expr
   63     | expr . LT expr
   64     | expr . LEQ expr
   65     | expr . GT expr
   66     | expr . GEQ expr
   67     | expr . CASTBOOL expr

    PLUS      shift, and go to state 54
    MINUS     shift, and go to state 55
    TIMES     shift, and go to state 56
    DIVIDE    shift, and go to state 57
    CASTBOOL  shift, and go to state 58
    EQ        shift, and go to state 59
    NEQ       shift, and go to state 60
    LT        shift, and go to state 61
    LEQ       shift, and go to state 62
    GT        shift, and go to state 63
    GEQ       shift, and go to state 64

    $default  reduce using rule 36 (stmt)


state 47

   26 var_decl: primtype ID ASSIGN . expr

    LPAREN      shift, and go to state 28
    LBRACKET    shift, and go to state 29
    ID          shift, and go to state 30
    STRING_LIT  shift, and go to state 31
    INT_VAL     shift, and go to state 32
    FLOAT_LIT   shift, and go to state 33
    BOOL_LIT    shift, and go to state 34

    SEMI      reduce using rule 47 (lit)
    SEMI      [reduce using rule 52 (fcall)]
    SEMI      [reduce using rule 54 (expr)]
    PLUS      reduce using rule 47 (lit)
    PLUS      [reduce using rule 52 (fcall)]
    PLUS      [reduce using rule 54 (expr)]
    MINUS     reduce using rule 47 (lit)
    MINUS     [reduce using rule 52 (fcall)]
    MINUS     [reduce using rule 54 (expr)]
    TIMES     reduce using rule 47 (lit)
    TIMES     [reduce using rule 52 (fcall)]
    TIMES     [reduce using rule 54 (expr)]
    DIVIDE    reduce using rule 47 (lit)
    DIVIDE    [reduce using rule 52 (fcall)]
    DIVIDE    [reduce using rule 54 (expr)]
    CASTBOOL  reduce using rule 47 (lit)
    CASTBOOL  [reduce using rule 52 (fcall)]
    CASTBOOL  [reduce using rule 54 (expr)]
    EQ        reduce using rule 47 (lit)
    EQ        [reduce using rule 52 (fcall)]
    EQ        [reduce using rule 54 (expr)]
    NEQ       reduce using rule 47 (lit)
    NEQ       [reduce using rule 52 (fcall)]
    NEQ       [reduce using rule 54 (expr)]
    LT        reduce using rule 47 (lit)
    LT        [reduce using rule 52 (fcall)]
    LT        [reduce using rule 54 (expr)]
    LEQ       reduce using rule 47 (lit)
    LEQ       [reduce using rule 52 (fcall)]
    LEQ       [reduce using rule 54 (expr)]
    GT        reduce using rule 47 (lit)
    GT        [reduce using rule 52 (fcall)]
    GT        [reduce using rule 54 (expr)]
    GEQ       reduce using rule 47 (lit)
    GEQ       [reduce using rule 52 (fcall)]
    GEQ       [reduce using rule 54 (expr)]
    ELSE      reduce using rule 47 (lit)
    ELSE      [reduce using rule 52 (fcall)]
    ELSE      [reduce using rule 54 (expr)]
    $default  reduce using rule 47 (lit)

    lit    go to state 35
    fcall  go to state 36
    expr   go to state 73


state 48

    3 primtype: LIST LTGEN primtype GTGEN .

    $default  reduce using rule 3 (primtype)


state 49

   57 expr: expr . PLUS expr
   58     | expr . MINUS expr
   59     | expr . TIMES expr
   60     | expr . DIVIDE expr
   61     | expr . EQ expr
   62     | expr . NEQ expr
   63     | expr . LT expr
   64     | expr . LEQ expr
   65     | expr . GT expr
   66     | expr . GEQ expr
   67     | expr . CASTBOOL expr
   69     | LPAREN expr . RPAREN

    RPAREN    shift, and go to state 74
    PLUS      shift, and go to state 54
    MINUS     shift, and go to state 55
    TIMES     shift, and go to state 56
    DIVIDE    shift, and go to state 57
    CASTBOOL  shift, and go to state 58
    EQ        shift, and go to state 59
    NEQ       shift, and go to state 60
    LT        shift, and go to state 61
    LEQ       shift, and go to state 62
    GT        shift, and go to state 63
    GEQ       shift, and go to state 64


state 50

   75 expression_list_opt: expression_list .

    $default  reduce using rule 75 (expression_list_opt)


state 51

   70 expr: LBRACKET expression_list_opt . RBRACKET

    RBRACKET  shift, and go to state 75


state 52

   53 fcall: ID LPAREN . expression_list_opt RPAREN

    LPAREN      shift, and go to state 28
    LBRACKET    shift, and go to state 29
    ID          shift, and go to state 30
    STRING_LIT  shift, and go to state 31
    INT_VAL     shift, and go to state 32
    FLOAT_LIT   shift, and go to state 33
    BOOL_LIT    shift, and go to state 34

    RPAREN    reduce using rule 47 (lit)
    RPAREN    [reduce using rule 52 (fcall)]
    RPAREN    [reduce using rule 54 (expr)]
    RPAREN    [reduce using rule 71 (expression_list)]
    RPAREN    [reduce using rule 73 (expression_list_opt)]
    RPAREN    [reduce using rule 74 (expression_list_opt)]
    RPAREN    [reduce using rule 76 (expression_list_internal)]
    COMMA     reduce using rule 47 (lit)
    COMMA     [reduce using rule 52 (fcall)]
    COMMA     [reduce using rule 54 (expr)]
    COMMA     [reduce using rule 76 (expression_list_internal)]
    PLUS      reduce using rule 47 (lit)
    PLUS      [reduce using rule 52 (fcall)]
    PLUS      [reduce using rule 54 (expr)]
    MINUS     reduce using rule 47 (lit)
    MINUS     [reduce using rule 52 (fcall)]
    MINUS     [reduce using rule 54 (expr)]
    TIMES     reduce using rule 47 (lit)
    TIMES     [reduce using rule 52 (fcall)]
    TIMES     [reduce using rule 54 (expr)]
    DIVIDE    reduce using rule 47 (lit)
    DIVIDE    [reduce using rule 52 (fcall)]
    DIVIDE    [reduce using rule 54 (expr)]
    CASTBOOL  reduce using rule 47 (lit)
    CASTBOOL  [reduce using rule 52 (fcall)]
    CASTBOOL  [reduce using rule 54 (expr)]
    EQ        reduce using rule 47 (lit)
    EQ        [reduce using rule 52 (fcall)]
    EQ        [reduce using rule 54 (expr)]
    NEQ       reduce using rule 47 (lit)
    NEQ       [reduce using rule 52 (fcall)]
    NEQ       [reduce using rule 54 (expr)]
    LT        reduce using rule 47 (lit)
    LT        [reduce using rule 52 (fcall)]
    LT        [reduce using rule 54 (expr)]
    LEQ       reduce using rule 47 (lit)
    LEQ       [reduce using rule 52 (fcall)]
    LEQ       [reduce using rule 54 (expr)]
    GT        reduce using rule 47 (lit)
    GT        [reduce using rule 52 (fcall)]
    GT        [reduce using rule 54 (expr)]
    GEQ       reduce using rule 47 (lit)
    GEQ       [reduce using rule 52 (fcall)]
    GEQ       [reduce using rule 54 (expr)]
    $default  reduce using rule 47 (lit)

    lit                       go to state 35
    fcall                     go to state 36
    expr                      go to state 42
    expression_list           go to state 50
    expression_list_opt       go to state 76
    expression_list_internal  go to state 44


state 53

   37 stmt: IF LPAREN expr RPAREN . stmt
   38     | IF LPAREN expr RPAREN . stmt ELSE stmt

    LIST     shift, and go to state 3
    IF       shift, and go to state 4
    FOR      shift, and go to state 5
    WHILE    shift, and go to state 6
    PRINTLN  shift, and go to state 8
    PRINTF   shift, and go to state 9
    ID       shift, and go to state 10
    TYPE     shift, and go to state 11

    SEMI      reduce using rule 24 (var_decl)
    SEMI      [reduce using rule 33 (stmt)]
    SEMI      [reduce using rule 41 (print)]
    ELSE      reduce using rule 24 (var_decl)
    ELSE      [reduce using rule 33 (stmt)]
    ELSE      [reduce using rule 41 (print)]
    ID        [reduce using rule 1 (primtype)]
    $default  reduce using rule 24 (var_decl)

    primtype  go to state 12
    var_decl  go to state 14
    stmt      go to state 77
    print     go to state 16


state 54

   57 expr: expr PLUS . expr

    LPAREN      shift, and go to state 28
    LBRACKET    shift, and go to state 29
    ID          shift, and go to state 30
    STRING_LIT  shift, and go to state 31
    INT_VAL     shift, and go to state 32
    FLOAT_LIT   shift, and go to state 33
    BOOL_LIT    shift, and go to state 34

    SEMI      reduce using rule 47 (lit)
    SEMI      [reduce using rule 52 (fcall)]
    SEMI      [reduce using rule 54 (expr)]
    RPAREN    reduce using rule 47 (lit)
    RPAREN    [reduce using rule 52 (fcall)]
    RPAREN    [reduce using rule 54 (expr)]
    COMMA     reduce using rule 47 (lit)
    COMMA     [reduce using rule 52 (fcall)]
    COMMA     [reduce using rule 54 (expr)]
    RBRACKET  reduce using rule 47 (lit)
    RBRACKET  [reduce using rule 52 (fcall)]
    RBRACKET  [reduce using rule 54 (expr)]
    PLUS      reduce using rule 47 (lit)
    PLUS      [reduce using rule 52 (fcall)]
    PLUS      [reduce using rule 54 (expr)]
    MINUS     reduce using rule 47 (lit)
    MINUS     [reduce using rule 52 (fcall)]
    MINUS     [reduce using rule 54 (expr)]
    TIMES     reduce using rule 47 (lit)
    TIMES     [reduce using rule 52 (fcall)]
    TIMES     [reduce using rule 54 (expr)]
    DIVIDE    reduce using rule 47 (lit)
    DIVIDE    [reduce using rule 52 (fcall)]
    DIVIDE    [reduce using rule 54 (expr)]
    CASTBOOL  reduce using rule 47 (lit)
    CASTBOOL  [reduce using rule 52 (fcall)]
    CASTBOOL  [reduce using rule 54 (expr)]
    EQ        reduce using rule 47 (lit)
    EQ        [reduce using rule 52 (fcall)]
    EQ        [reduce using rule 54 (expr)]
    NEQ       reduce using rule 47 (lit)
    NEQ       [reduce using rule 52 (fcall)]
    NEQ       [reduce using rule 54 (expr)]
    LT        reduce using rule 47 (lit)
    LT        [reduce using rule 52 (fcall)]
    LT        [reduce using rule 54 (expr)]
    LEQ       reduce using rule 47 (lit)
    LEQ       [reduce using rule 52 (fcall)]
    LEQ       [reduce using rule 54 (expr)]
    GT        reduce using rule 47 (lit)
    GT        [reduce using rule 52 (fcall)]
    GT        [reduce using rule 54 (expr)]
    GEQ       reduce using rule 47 (lit)
    GEQ       [reduce using rule 52 (fcall)]
    GEQ       [reduce using rule 54 (expr)]
    ELSE      reduce using rule 47 (lit)
    ELSE      [reduce using rule 52 (fcall)]
    ELSE      [reduce using rule 54 (expr)]
    $default  reduce using rule 47 (lit)

    lit    go to state 35
    fcall  go to state 36
    expr   go to state 78


state 55

   58 expr: expr MINUS . expr

    LPAREN      shift, and go to state 28
    LBRACKET    shift, and go to state 29
    ID          shift, and go to state 30
    STRING_LIT  shift, and go to state 31
    INT_VAL     shift, and go to state 32
    FLOAT_LIT   shift, and go to state 33
    BOOL_LIT    shift, and go to state 34

    SEMI      reduce using rule 47 (lit)
    SEMI      [reduce using rule 52 (fcall)]
    SEMI      [reduce using rule 54 (expr)]
    RPAREN    reduce using rule 47 (lit)
    RPAREN    [reduce using rule 52 (fcall)]
    RPAREN    [reduce using rule 54 (expr)]
    COMMA     reduce using rule 47 (lit)
    COMMA     [reduce using rule 52 (fcall)]
    COMMA     [reduce using rule 54 (expr)]
    RBRACKET  reduce using rule 47 (lit)
    RBRACKET  [reduce using rule 52 (fcall)]
    RBRACKET  [reduce using rule 54 (expr)]
    PLUS      reduce using rule 47 (lit)
    PLUS      [reduce using rule 52 (fcall)]
    PLUS      [reduce using rule 54 (expr)]
    MINUS     reduce using rule 47 (lit)
    MINUS     [reduce using rule 52 (fcall)]
    MINUS     [reduce using rule 54 (expr)]
    TIMES     reduce using rule 47 (lit)
    TIMES     [reduce using rule 52 (fcall)]
    TIMES     [reduce using rule 54 (expr)]
    DIVIDE    reduce using rule 47 (lit)
    DIVIDE    [reduce using rule 52 (fcall)]
    DIVIDE    [reduce using rule 54 (expr)]
    CASTBOOL  reduce using rule 47 (lit)
    CASTBOOL  [reduce using rule 52 (fcall)]
    CASTBOOL  [reduce using rule 54 (expr)]
    EQ        reduce using rule 47 (lit)
    EQ        [reduce using rule 52 (fcall)]
    EQ        [reduce using rule 54 (expr)]
    NEQ       reduce using rule 47 (lit)
    NEQ       [reduce using rule 52 (fcall)]
    NEQ       [reduce using rule 54 (expr)]
    LT        reduce using rule 47 (lit)
    LT        [reduce using rule 52 (fcall)]
    LT        [reduce using rule 54 (expr)]
    LEQ       reduce using rule 47 (lit)
    LEQ       [reduce using rule 52 (fcall)]
    LEQ       [reduce using rule 54 (expr)]
    GT        reduce using rule 47 (lit)
    GT        [reduce using rule 52 (fcall)]
    GT        [reduce using rule 54 (expr)]
    GEQ       reduce using rule 47 (lit)
    GEQ       [reduce using rule 52 (fcall)]
    GEQ       [reduce using rule 54 (expr)]
    ELSE      reduce using rule 47 (lit)
    ELSE      [reduce using rule 52 (fcall)]
    ELSE      [reduce using rule 54 (expr)]
    $default  reduce using rule 47 (lit)

    lit    go to state 35
    fcall  go to state 36
    expr   go to state 79


state 56

   59 expr: expr TIMES . expr

    LPAREN      shift, and go to state 28
    LBRACKET    shift, and go to state 29
    ID          shift, and go to state 30
    STRING_LIT  shift, and go to state 31
    INT_VAL     shift, and go to state 32
    FLOAT_LIT   shift, and go to state 33
    BOOL_LIT    shift, and go to state 34

    SEMI      reduce using rule 47 (lit)
    SEMI      [reduce using rule 52 (fcall)]
    SEMI      [reduce using rule 54 (expr)]
    RPAREN    reduce using rule 47 (lit)
    RPAREN    [reduce using rule 52 (fcall)]
    RPAREN    [reduce using rule 54 (expr)]
    COMMA     reduce using rule 47 (lit)
    COMMA     [reduce using rule 52 (fcall)]
    COMMA     [reduce using rule 54 (expr)]
    RBRACKET  reduce using rule 47 (lit)
    RBRACKET  [reduce using rule 52 (fcall)]
    RBRACKET  [reduce using rule 54 (expr)]
    PLUS      reduce using rule 47 (lit)
    PLUS      [reduce using rule 52 (fcall)]
    PLUS      [reduce using rule 54 (expr)]
    MINUS     reduce using rule 47 (lit)
    MINUS     [reduce using rule 52 (fcall)]
    MINUS     [reduce using rule 54 (expr)]
    TIMES     reduce using rule 47 (lit)
    TIMES     [reduce using rule 52 (fcall)]
    TIMES     [reduce using rule 54 (expr)]
    DIVIDE    reduce using rule 47 (lit)
    DIVIDE    [reduce using rule 52 (fcall)]
    DIVIDE    [reduce using rule 54 (expr)]
    CASTBOOL  reduce using rule 47 (lit)
    CASTBOOL  [reduce using rule 52 (fcall)]
    CASTBOOL  [reduce using rule 54 (expr)]
    EQ        reduce using rule 47 (lit)
    EQ        [reduce using rule 52 (fcall)]
    EQ        [reduce using rule 54 (expr)]
    NEQ       reduce using rule 47 (lit)
    NEQ       [reduce using rule 52 (fcall)]
    NEQ       [reduce using rule 54 (expr)]
    LT        reduce using rule 47 (lit)
    LT        [reduce using rule 52 (fcall)]
    LT        [reduce using rule 54 (expr)]
    LEQ       reduce using rule 47 (lit)
    LEQ       [reduce using rule 52 (fcall)]
    LEQ       [reduce using rule 54 (expr)]
    GT        reduce using rule 47 (lit)
    GT        [reduce using rule 52 (fcall)]
    GT        [reduce using rule 54 (expr)]
    GEQ       reduce using rule 47 (lit)
    GEQ       [reduce using rule 52 (fcall)]
    GEQ       [reduce using rule 54 (expr)]
    ELSE      reduce using rule 47 (lit)
    ELSE      [reduce using rule 52 (fcall)]
    ELSE      [reduce using rule 54 (expr)]
    $default  reduce using rule 47 (lit)

    lit    go to state 35
    fcall  go to state 36
    expr   go to state 80


state 57

   60 expr: expr DIVIDE . expr

    LPAREN      shift, and go to state 28
    LBRACKET    shift, and go to state 29
    ID          shift, and go to state 30
    STRING_LIT  shift, and go to state 31
    INT_VAL     shift, and go to state 32
    FLOAT_LIT   shift, and go to state 33
    BOOL_LIT    shift, and go to state 34

    SEMI      reduce using rule 47 (lit)
    SEMI      [reduce using rule 52 (fcall)]
    SEMI      [reduce using rule 54 (expr)]
    RPAREN    reduce using rule 47 (lit)
    RPAREN    [reduce using rule 52 (fcall)]
    RPAREN    [reduce using rule 54 (expr)]
    COMMA     reduce using rule 47 (lit)
    COMMA     [reduce using rule 52 (fcall)]
    COMMA     [reduce using rule 54 (expr)]
    RBRACKET  reduce using rule 47 (lit)
    RBRACKET  [reduce using rule 52 (fcall)]
    RBRACKET  [reduce using rule 54 (expr)]
    PLUS      reduce using rule 47 (lit)
    PLUS      [reduce using rule 52 (fcall)]
    PLUS      [reduce using rule 54 (expr)]
    MINUS     reduce using rule 47 (lit)
    MINUS     [reduce using rule 52 (fcall)]
    MINUS     [reduce using rule 54 (expr)]
    TIMES     reduce using rule 47 (lit)
    TIMES     [reduce using rule 52 (fcall)]
    TIMES     [reduce using rule 54 (expr)]
    DIVIDE    reduce using rule 47 (lit)
    DIVIDE    [reduce using rule 52 (fcall)]
    DIVIDE    [reduce using rule 54 (expr)]
    CASTBOOL  reduce using rule 47 (lit)
    CASTBOOL  [reduce using rule 52 (fcall)]
    CASTBOOL  [reduce using rule 54 (expr)]
    EQ        reduce using rule 47 (lit)
    EQ        [reduce using rule 52 (fcall)]
    EQ        [reduce using rule 54 (expr)]
    NEQ       reduce using rule 47 (lit)
    NEQ       [reduce using rule 52 (fcall)]
    NEQ       [reduce using rule 54 (expr)]
    LT        reduce using rule 47 (lit)
    LT        [reduce using rule 52 (fcall)]
    LT        [reduce using rule 54 (expr)]
    LEQ       reduce using rule 47 (lit)
    LEQ       [reduce using rule 52 (fcall)]
    LEQ       [reduce using rule 54 (expr)]
    GT        reduce using rule 47 (lit)
    GT        [reduce using rule 52 (fcall)]
    GT        [reduce using rule 54 (expr)]
    GEQ       reduce using rule 47 (lit)
    GEQ       [reduce using rule 52 (fcall)]
    GEQ       [reduce using rule 54 (expr)]
    ELSE      reduce using rule 47 (lit)
    ELSE      [reduce using rule 52 (fcall)]
    ELSE      [reduce using rule 54 (expr)]
    $default  reduce using rule 47 (lit)

    lit    go to state 35
    fcall  go to state 36
    expr   go to state 81


state 58

   67 expr: expr CASTBOOL . expr

    LPAREN      shift, and go to state 28
    LBRACKET    shift, and go to state 29
    ID          shift, and go to state 30
    STRING_LIT  shift, and go to state 31
    INT_VAL     shift, and go to state 32
    FLOAT_LIT   shift, and go to state 33
    BOOL_LIT    shift, and go to state 34

    SEMI      reduce using rule 47 (lit)
    SEMI      [reduce using rule 52 (fcall)]
    SEMI      [reduce using rule 54 (expr)]
    RPAREN    reduce using rule 47 (lit)
    RPAREN    [reduce using rule 52 (fcall)]
    RPAREN    [reduce using rule 54 (expr)]
    COMMA     reduce using rule 47 (lit)
    COMMA     [reduce using rule 52 (fcall)]
    COMMA     [reduce using rule 54 (expr)]
    RBRACKET  reduce using rule 47 (lit)
    RBRACKET  [reduce using rule 52 (fcall)]
    RBRACKET  [reduce using rule 54 (expr)]
    PLUS      reduce using rule 47 (lit)
    PLUS      [reduce using rule 52 (fcall)]
    PLUS      [reduce using rule 54 (expr)]
    MINUS     reduce using rule 47 (lit)
    MINUS     [reduce using rule 52 (fcall)]
    MINUS     [reduce using rule 54 (expr)]
    TIMES     reduce using rule 47 (lit)
    TIMES     [reduce using rule 52 (fcall)]
    TIMES     [reduce using rule 54 (expr)]
    DIVIDE    reduce using rule 47 (lit)
    DIVIDE    [reduce using rule 52 (fcall)]
    DIVIDE    [reduce using rule 54 (expr)]
    CASTBOOL  reduce using rule 47 (lit)
    CASTBOOL  [reduce using rule 52 (fcall)]
    CASTBOOL  [reduce using rule 54 (expr)]
    EQ        reduce using rule 47 (lit)
    EQ        [reduce using rule 52 (fcall)]
    EQ        [reduce using rule 54 (expr)]
    NEQ       reduce using rule 47 (lit)
    NEQ       [reduce using rule 52 (fcall)]
    NEQ       [reduce using rule 54 (expr)]
    LT        reduce using rule 47 (lit)
    LT        [reduce using rule 52 (fcall)]
    LT        [reduce using rule 54 (expr)]
    LEQ       reduce using rule 47 (lit)
    LEQ       [reduce using rule 52 (fcall)]
    LEQ       [reduce using rule 54 (expr)]
    GT        reduce using rule 47 (lit)
    GT        [reduce using rule 52 (fcall)]
    GT        [reduce using rule 54 (expr)]
    GEQ       reduce using rule 47 (lit)
    GEQ       [reduce using rule 52 (fcall)]
    GEQ       [reduce using rule 54 (expr)]
    ELSE      reduce using rule 47 (lit)
    ELSE      [reduce using rule 52 (fcall)]
    ELSE      [reduce using rule 54 (expr)]
    $default  reduce using rule 47 (lit)

    lit    go to state 35
    fcall  go to state 36
    expr   go to state 82


state 59

   61 expr: expr EQ . expr

    LPAREN      shift, and go to state 28
    LBRACKET    shift, and go to state 29
    ID          shift, and go to state 30
    STRING_LIT  shift, and go to state 31
    INT_VAL     shift, and go to state 32
    FLOAT_LIT   shift, and go to state 33
    BOOL_LIT    shift, and go to state 34

    SEMI      reduce using rule 47 (lit)
    SEMI      [reduce using rule 52 (fcall)]
    SEMI      [reduce using rule 54 (expr)]
    RPAREN    reduce using rule 47 (lit)
    RPAREN    [reduce using rule 52 (fcall)]
    RPAREN    [reduce using rule 54 (expr)]
    COMMA     reduce using rule 47 (lit)
    COMMA     [reduce using rule 52 (fcall)]
    COMMA     [reduce using rule 54 (expr)]
    RBRACKET  reduce using rule 47 (lit)
    RBRACKET  [reduce using rule 52 (fcall)]
    RBRACKET  [reduce using rule 54 (expr)]
    PLUS      reduce using rule 47 (lit)
    PLUS      [reduce using rule 52 (fcall)]
    PLUS      [reduce using rule 54 (expr)]
    MINUS     reduce using rule 47 (lit)
    MINUS     [reduce using rule 52 (fcall)]
    MINUS     [reduce using rule 54 (expr)]
    TIMES     reduce using rule 47 (lit)
    TIMES     [reduce using rule 52 (fcall)]
    TIMES     [reduce using rule 54 (expr)]
    DIVIDE    reduce using rule 47 (lit)
    DIVIDE    [reduce using rule 52 (fcall)]
    DIVIDE    [reduce using rule 54 (expr)]
    CASTBOOL  reduce using rule 47 (lit)
    CASTBOOL  [reduce using rule 52 (fcall)]
    CASTBOOL  [reduce using rule 54 (expr)]
    EQ        reduce using rule 47 (lit)
    EQ        [reduce using rule 52 (fcall)]
    EQ        [reduce using rule 54 (expr)]
    NEQ       reduce using rule 47 (lit)
    NEQ       [reduce using rule 52 (fcall)]
    NEQ       [reduce using rule 54 (expr)]
    LT        reduce using rule 47 (lit)
    LT        [reduce using rule 52 (fcall)]
    LT        [reduce using rule 54 (expr)]
    LEQ       reduce using rule 47 (lit)
    LEQ       [reduce using rule 52 (fcall)]
    LEQ       [reduce using rule 54 (expr)]
    GT        reduce using rule 47 (lit)
    GT        [reduce using rule 52 (fcall)]
    GT        [reduce using rule 54 (expr)]
    GEQ       reduce using rule 47 (lit)
    GEQ       [reduce using rule 52 (fcall)]
    GEQ       [reduce using rule 54 (expr)]
    ELSE      reduce using rule 47 (lit)
    ELSE      [reduce using rule 52 (fcall)]
    ELSE      [reduce using rule 54 (expr)]
    $default  reduce using rule 47 (lit)

    lit    go to state 35
    fcall  go to state 36
    expr   go to state 83


state 60

   62 expr: expr NEQ . expr

    LPAREN      shift, and go to state 28
    LBRACKET    shift, and go to state 29
    ID          shift, and go to state 30
    STRING_LIT  shift, and go to state 31
    INT_VAL     shift, and go to state 32
    FLOAT_LIT   shift, and go to state 33
    BOOL_LIT    shift, and go to state 34

    SEMI      reduce using rule 47 (lit)
    SEMI      [reduce using rule 52 (fcall)]
    SEMI      [reduce using rule 54 (expr)]
    RPAREN    reduce using rule 47 (lit)
    RPAREN    [reduce using rule 52 (fcall)]
    RPAREN    [reduce using rule 54 (expr)]
    COMMA     reduce using rule 47 (lit)
    COMMA     [reduce using rule 52 (fcall)]
    COMMA     [reduce using rule 54 (expr)]
    RBRACKET  reduce using rule 47 (lit)
    RBRACKET  [reduce using rule 52 (fcall)]
    RBRACKET  [reduce using rule 54 (expr)]
    PLUS      reduce using rule 47 (lit)
    PLUS      [reduce using rule 52 (fcall)]
    PLUS      [reduce using rule 54 (expr)]
    MINUS     reduce using rule 47 (lit)
    MINUS     [reduce using rule 52 (fcall)]
    MINUS     [reduce using rule 54 (expr)]
    TIMES     reduce using rule 47 (lit)
    TIMES     [reduce using rule 52 (fcall)]
    TIMES     [reduce using rule 54 (expr)]
    DIVIDE    reduce using rule 47 (lit)
    DIVIDE    [reduce using rule 52 (fcall)]
    DIVIDE    [reduce using rule 54 (expr)]
    CASTBOOL  reduce using rule 47 (lit)
    CASTBOOL  [reduce using rule 52 (fcall)]
    CASTBOOL  [reduce using rule 54 (expr)]
    EQ        reduce using rule 47 (lit)
    EQ        [reduce using rule 52 (fcall)]
    EQ        [reduce using rule 54 (expr)]
    NEQ       reduce using rule 47 (lit)
    NEQ       [reduce using rule 52 (fcall)]
    NEQ       [reduce using rule 54 (expr)]
    LT        reduce using rule 47 (lit)
    LT        [reduce using rule 52 (fcall)]
    LT        [reduce using rule 54 (expr)]
    LEQ       reduce using rule 47 (lit)
    LEQ       [reduce using rule 52 (fcall)]
    LEQ       [reduce using rule 54 (expr)]
    GT        reduce using rule 47 (lit)
    GT        [reduce using rule 52 (fcall)]
    GT        [reduce using rule 54 (expr)]
    GEQ       reduce using rule 47 (lit)
    GEQ       [reduce using rule 52 (fcall)]
    GEQ       [reduce using rule 54 (expr)]
    ELSE      reduce using rule 47 (lit)
    ELSE      [reduce using rule 52 (fcall)]
    ELSE      [reduce using rule 54 (expr)]
    $default  reduce using rule 47 (lit)

    lit    go to state 35
    fcall  go to state 36
    expr   go to state 84


state 61

   63 expr: expr LT . expr

    LPAREN      shift, and go to state 28
    LBRACKET    shift, and go to state 29
    ID          shift, and go to state 30
    STRING_LIT  shift, and go to state 31
    INT_VAL     shift, and go to state 32
    FLOAT_LIT   shift, and go to state 33
    BOOL_LIT    shift, and go to state 34

    SEMI      reduce using rule 47 (lit)
    SEMI      [reduce using rule 52 (fcall)]
    SEMI      [reduce using rule 54 (expr)]
    RPAREN    reduce using rule 47 (lit)
    RPAREN    [reduce using rule 52 (fcall)]
    RPAREN    [reduce using rule 54 (expr)]
    COMMA     reduce using rule 47 (lit)
    COMMA     [reduce using rule 52 (fcall)]
    COMMA     [reduce using rule 54 (expr)]
    RBRACKET  reduce using rule 47 (lit)
    RBRACKET  [reduce using rule 52 (fcall)]
    RBRACKET  [reduce using rule 54 (expr)]
    PLUS      reduce using rule 47 (lit)
    PLUS      [reduce using rule 52 (fcall)]
    PLUS      [reduce using rule 54 (expr)]
    MINUS     reduce using rule 47 (lit)
    MINUS     [reduce using rule 52 (fcall)]
    MINUS     [reduce using rule 54 (expr)]
    TIMES     reduce using rule 47 (lit)
    TIMES     [reduce using rule 52 (fcall)]
    TIMES     [reduce using rule 54 (expr)]
    DIVIDE    reduce using rule 47 (lit)
    DIVIDE    [reduce using rule 52 (fcall)]
    DIVIDE    [reduce using rule 54 (expr)]
    CASTBOOL  reduce using rule 47 (lit)
    CASTBOOL  [reduce using rule 52 (fcall)]
    CASTBOOL  [reduce using rule 54 (expr)]
    EQ        reduce using rule 47 (lit)
    EQ        [reduce using rule 52 (fcall)]
    EQ        [reduce using rule 54 (expr)]
    NEQ       reduce using rule 47 (lit)
    NEQ       [reduce using rule 52 (fcall)]
    NEQ       [reduce using rule 54 (expr)]
    LT        reduce using rule 47 (lit)
    LT        [reduce using rule 52 (fcall)]
    LT        [reduce using rule 54 (expr)]
    LEQ       reduce using rule 47 (lit)
    LEQ       [reduce using rule 52 (fcall)]
    LEQ       [reduce using rule 54 (expr)]
    GT        reduce using rule 47 (lit)
    GT        [reduce using rule 52 (fcall)]
    GT        [reduce using rule 54 (expr)]
    GEQ       reduce using rule 47 (lit)
    GEQ       [reduce using rule 52 (fcall)]
    GEQ       [reduce using rule 54 (expr)]
    ELSE      reduce using rule 47 (lit)
    ELSE      [reduce using rule 52 (fcall)]
    ELSE      [reduce using rule 54 (expr)]
    $default  reduce using rule 47 (lit)

    lit    go to state 35
    fcall  go to state 36
    expr   go to state 85


state 62

   64 expr: expr LEQ . expr

    LPAREN      shift, and go to state 28
    LBRACKET    shift, and go to state 29
    ID          shift, and go to state 30
    STRING_LIT  shift, and go to state 31
    INT_VAL     shift, and go to state 32
    FLOAT_LIT   shift, and go to state 33
    BOOL_LIT    shift, and go to state 34

    SEMI      reduce using rule 47 (lit)
    SEMI      [reduce using rule 52 (fcall)]
    SEMI      [reduce using rule 54 (expr)]
    RPAREN    reduce using rule 47 (lit)
    RPAREN    [reduce using rule 52 (fcall)]
    RPAREN    [reduce using rule 54 (expr)]
    COMMA     reduce using rule 47 (lit)
    COMMA     [reduce using rule 52 (fcall)]
    COMMA     [reduce using rule 54 (expr)]
    RBRACKET  reduce using rule 47 (lit)
    RBRACKET  [reduce using rule 52 (fcall)]
    RBRACKET  [reduce using rule 54 (expr)]
    PLUS      reduce using rule 47 (lit)
    PLUS      [reduce using rule 52 (fcall)]
    PLUS      [reduce using rule 54 (expr)]
    MINUS     reduce using rule 47 (lit)
    MINUS     [reduce using rule 52 (fcall)]
    MINUS     [reduce using rule 54 (expr)]
    TIMES     reduce using rule 47 (lit)
    TIMES     [reduce using rule 52 (fcall)]
    TIMES     [reduce using rule 54 (expr)]
    DIVIDE    reduce using rule 47 (lit)
    DIVIDE    [reduce using rule 52 (fcall)]
    DIVIDE    [reduce using rule 54 (expr)]
    CASTBOOL  reduce using rule 47 (lit)
    CASTBOOL  [reduce using rule 52 (fcall)]
    CASTBOOL  [reduce using rule 54 (expr)]
    EQ        reduce using rule 47 (lit)
    EQ        [reduce using rule 52 (fcall)]
    EQ        [reduce using rule 54 (expr)]
    NEQ       reduce using rule 47 (lit)
    NEQ       [reduce using rule 52 (fcall)]
    NEQ       [reduce using rule 54 (expr)]
    LT        reduce using rule 47 (lit)
    LT        [reduce using rule 52 (fcall)]
    LT        [reduce using rule 54 (expr)]
    LEQ       reduce using rule 47 (lit)
    LEQ       [reduce using rule 52 (fcall)]
    LEQ       [reduce using rule 54 (expr)]
    GT        reduce using rule 47 (lit)
    GT        [reduce using rule 52 (fcall)]
    GT        [reduce using rule 54 (expr)]
    GEQ       reduce using rule 47 (lit)
    GEQ       [reduce using rule 52 (fcall)]
    GEQ       [reduce using rule 54 (expr)]
    ELSE      reduce using rule 47 (lit)
    ELSE      [reduce using rule 52 (fcall)]
    ELSE      [reduce using rule 54 (expr)]
    $default  reduce using rule 47 (lit)

    lit    go to state 35
    fcall  go to state 36
    expr   go to state 86


state 63

   65 expr: expr GT . expr

    LPAREN      shift, and go to state 28
    LBRACKET    shift, and go to state 29
    ID          shift, and go to state 30
    STRING_LIT  shift, and go to state 31
    INT_VAL     shift, and go to state 32
    FLOAT_LIT   shift, and go to state 33
    BOOL_LIT    shift, and go to state 34

    SEMI      reduce using rule 47 (lit)
    SEMI      [reduce using rule 52 (fcall)]
    SEMI      [reduce using rule 54 (expr)]
    RPAREN    reduce using rule 47 (lit)
    RPAREN    [reduce using rule 52 (fcall)]
    RPAREN    [reduce using rule 54 (expr)]
    COMMA     reduce using rule 47 (lit)
    COMMA     [reduce using rule 52 (fcall)]
    COMMA     [reduce using rule 54 (expr)]
    RBRACKET  reduce using rule 47 (lit)
    RBRACKET  [reduce using rule 52 (fcall)]
    RBRACKET  [reduce using rule 54 (expr)]
    PLUS      reduce using rule 47 (lit)
    PLUS      [reduce using rule 52 (fcall)]
    PLUS      [reduce using rule 54 (expr)]
    MINUS     reduce using rule 47 (lit)
    MINUS     [reduce using rule 52 (fcall)]
    MINUS     [reduce using rule 54 (expr)]
    TIMES     reduce using rule 47 (lit)
    TIMES     [reduce using rule 52 (fcall)]
    TIMES     [reduce using rule 54 (expr)]
    DIVIDE    reduce using rule 47 (lit)
    DIVIDE    [reduce using rule 52 (fcall)]
    DIVIDE    [reduce using rule 54 (expr)]
    CASTBOOL  reduce using rule 47 (lit)
    CASTBOOL  [reduce using rule 52 (fcall)]
    CASTBOOL  [reduce using rule 54 (expr)]
    EQ        reduce using rule 47 (lit)
    EQ        [reduce using rule 52 (fcall)]
    EQ        [reduce using rule 54 (expr)]
    NEQ       reduce using rule 47 (lit)
    NEQ       [reduce using rule 52 (fcall)]
    NEQ       [reduce using rule 54 (expr)]
    LT        reduce using rule 47 (lit)
    LT        [reduce using rule 52 (fcall)]
    LT        [reduce using rule 54 (expr)]
    LEQ       reduce using rule 47 (lit)
    LEQ       [reduce using rule 52 (fcall)]
    LEQ       [reduce using rule 54 (expr)]
    GT        reduce using rule 47 (lit)
    GT        [reduce using rule 52 (fcall)]
    GT        [reduce using rule 54 (expr)]
    GEQ       reduce using rule 47 (lit)
    GEQ       [reduce using rule 52 (fcall)]
    GEQ       [reduce using rule 54 (expr)]
    ELSE      reduce using rule 47 (lit)
    ELSE      [reduce using rule 52 (fcall)]
    ELSE      [reduce using rule 54 (expr)]
    $default  reduce using rule 47 (lit)

    lit    go to state 35
    fcall  go to state 36
    expr   go to state 87


state 64

   66 expr: expr GEQ . expr

    LPAREN      shift, and go to state 28
    LBRACKET    shift, and go to state 29
    ID          shift, and go to state 30
    STRING_LIT  shift, and go to state 31
    INT_VAL     shift, and go to state 32
    FLOAT_LIT   shift, and go to state 33
    BOOL_LIT    shift, and go to state 34

    SEMI      reduce using rule 47 (lit)
    SEMI      [reduce using rule 52 (fcall)]
    SEMI      [reduce using rule 54 (expr)]
    RPAREN    reduce using rule 47 (lit)
    RPAREN    [reduce using rule 52 (fcall)]
    RPAREN    [reduce using rule 54 (expr)]
    COMMA     reduce using rule 47 (lit)
    COMMA     [reduce using rule 52 (fcall)]
    COMMA     [reduce using rule 54 (expr)]
    RBRACKET  reduce using rule 47 (lit)
    RBRACKET  [reduce using rule 52 (fcall)]
    RBRACKET  [reduce using rule 54 (expr)]
    PLUS      reduce using rule 47 (lit)
    PLUS      [reduce using rule 52 (fcall)]
    PLUS      [reduce using rule 54 (expr)]
    MINUS     reduce using rule 47 (lit)
    MINUS     [reduce using rule 52 (fcall)]
    MINUS     [reduce using rule 54 (expr)]
    TIMES     reduce using rule 47 (lit)
    TIMES     [reduce using rule 52 (fcall)]
    TIMES     [reduce using rule 54 (expr)]
    DIVIDE    reduce using rule 47 (lit)
    DIVIDE    [reduce using rule 52 (fcall)]
    DIVIDE    [reduce using rule 54 (expr)]
    CASTBOOL  reduce using rule 47 (lit)
    CASTBOOL  [reduce using rule 52 (fcall)]
    CASTBOOL  [reduce using rule 54 (expr)]
    EQ        reduce using rule 47 (lit)
    EQ        [reduce using rule 52 (fcall)]
    EQ        [reduce using rule 54 (expr)]
    NEQ       reduce using rule 47 (lit)
    NEQ       [reduce using rule 52 (fcall)]
    NEQ       [reduce using rule 54 (expr)]
    LT        reduce using rule 47 (lit)
    LT        [reduce using rule 52 (fcall)]
    LT        [reduce using rule 54 (expr)]
    LEQ       reduce using rule 47 (lit)
    LEQ       [reduce using rule 52 (fcall)]
    LEQ       [reduce using rule 54 (expr)]
    GT        reduce using rule 47 (lit)
    GT        [reduce using rule 52 (fcall)]
    GT        [reduce using rule 54 (expr)]
    GEQ       reduce using rule 47 (lit)
    GEQ       [reduce using rule 52 (fcall)]
    GEQ       [reduce using rule 54 (expr)]
    ELSE      reduce using rule 47 (lit)
    ELSE      [reduce using rule 52 (fcall)]
    ELSE      [reduce using rule 54 (expr)]
    $default  reduce using rule 47 (lit)

    lit    go to state 35
    fcall  go to state 36
    expr   go to state 88


state 65

   39 stmt: FOR LPAREN expr_opt SEMI . expr_opt SEMI expr_opt RPAREN stmt

    LPAREN      shift, and go to state 28
    LBRACKET    shift, and go to state 29
    ID          shift, and go to state 30
    STRING_LIT  shift, and go to state 31
    INT_VAL     shift, and go to state 32
    FLOAT_LIT   shift, and go to state 33
    BOOL_LIT    shift, and go to state 34

    SEMI      reduce using rule 44 (expr_opt)
    SEMI      [reduce using rule 45 (expr_opt)]
    SEMI      [reduce using rule 47 (lit)]
    SEMI      [reduce using rule 52 (fcall)]
    SEMI      [reduce using rule 54 (expr)]
    PLUS      reduce using rule 47 (lit)
    PLUS      [reduce using rule 52 (fcall)]
    PLUS      [reduce using rule 54 (expr)]
    MINUS     reduce using rule 47 (lit)
    MINUS     [reduce using rule 52 (fcall)]
    MINUS     [reduce using rule 54 (expr)]
    TIMES     reduce using rule 47 (lit)
    TIMES     [reduce using rule 52 (fcall)]
    TIMES     [reduce using rule 54 (expr)]
    DIVIDE    reduce using rule 47 (lit)
    DIVIDE    [reduce using rule 52 (fcall)]
    DIVIDE    [reduce using rule 54 (expr)]
    CASTBOOL  reduce using rule 47 (lit)
    CASTBOOL  [reduce using rule 52 (fcall)]
    CASTBOOL  [reduce using rule 54 (expr)]
    EQ        reduce using rule 47 (lit)
    EQ        [reduce using rule 52 (fcall)]
    EQ        [reduce using rule 54 (expr)]
    NEQ       reduce using rule 47 (lit)
    NEQ       [reduce using rule 52 (fcall)]
    NEQ       [reduce using rule 54 (expr)]
    LT        reduce using rule 47 (lit)
    LT        [reduce using rule 52 (fcall)]
    LT        [reduce using rule 54 (expr)]
    LEQ       reduce using rule 47 (lit)
    LEQ       [reduce using rule 52 (fcall)]
    LEQ       [reduce using rule 54 (expr)]
    GT        reduce using rule 47 (lit)
    GT        [reduce using rule 52 (fcall)]
    GT        [reduce using rule 54 (expr)]
    GEQ       reduce using rule 47 (lit)
    GEQ       [reduce using rule 52 (fcall)]
    GEQ       [reduce using rule 54 (expr)]
    $default  reduce using rule 47 (lit)

    expr_opt  go to state 89
    lit       go to state 35
    fcall     go to state 36
    expr      go to state 39


state 66

   40 stmt: WHILE LPAREN expr RPAREN . stmt

    LIST     shift, and go to state 3
    IF       shift, and go to state 4
    FOR      shift, and go to state 5
    WHILE    shift, and go to state 6
    PRINTLN  shift, and go to state 8
    PRINTF   shift, and go to state 9
    ID       shift, and go to state 10
    TYPE     shift, and go to state 11

    SEMI      reduce using rule 24 (var_decl)
    SEMI      [reduce using rule 33 (stmt)]
    SEMI      [reduce using rule 41 (print)]
    ELSE      reduce using rule 24 (var_decl)
    ELSE      [reduce using rule 33 (stmt)]
    ELSE      [reduce using rule 41 (print)]
    ID        [reduce using rule 1 (primtype)]
    $default  reduce using rule 24 (var_decl)

    primtype  go to state 12
    var_decl  go to state 14
    stmt      go to state 90
    print     go to state 16


state 67

   22 formal_list: primtype . ID

    ID  shift, and go to state 91


state 68

   16 func_decl: FUNC ID LPAREN arguments . RPAREN return_type LBRACE fstmt_list RBRACE
   17          | FUNC ID LPAREN arguments . RPAREN LBRACE fstmt_list RBRACE

    RPAREN  shift, and go to state 92


state 69

   20 arguments: formal_list .
   23 formal_list: formal_list . COMMA primtype ID

    COMMA  shift, and go to state 93

    $default  reduce using rule 20 (arguments)


state 70

   42 print: PRINTLN LPAREN expression_list RPAREN .

    $default  reduce using rule 42 (print)


state 71

   78 expression_list_internal: expression_list_internal COMMA . expr

    LPAREN      shift, and go to state 28
    LBRACKET    shift, and go to state 29
    ID          shift, and go to state 30
    STRING_LIT  shift, and go to state 31
    INT_VAL     shift, and go to state 32
    FLOAT_LIT   shift, and go to state 33
    BOOL_LIT    shift, and go to state 34

    RPAREN    reduce using rule 47 (lit)
    RPAREN    [reduce using rule 52 (fcall)]
    RPAREN    [reduce using rule 54 (expr)]
    COMMA     reduce using rule 47 (lit)
    COMMA     [reduce using rule 52 (fcall)]
    COMMA     [reduce using rule 54 (expr)]
    RBRACKET  reduce using rule 47 (lit)
    RBRACKET  [reduce using rule 52 (fcall)]
    RBRACKET  [reduce using rule 54 (expr)]
    PLUS      reduce using rule 47 (lit)
    PLUS      [reduce using rule 52 (fcall)]
    PLUS      [reduce using rule 54 (expr)]
    MINUS     reduce using rule 47 (lit)
    MINUS     [reduce using rule 52 (fcall)]
    MINUS     [reduce using rule 54 (expr)]
    TIMES     reduce using rule 47 (lit)
    TIMES     [reduce using rule 52 (fcall)]
    TIMES     [reduce using rule 54 (expr)]
    DIVIDE    reduce using rule 47 (lit)
    DIVIDE    [reduce using rule 52 (fcall)]
    DIVIDE    [reduce using rule 54 (expr)]
    CASTBOOL  reduce using rule 47 (lit)
    CASTBOOL  [reduce using rule 52 (fcall)]
    CASTBOOL  [reduce using rule 54 (expr)]
    EQ        reduce using rule 47 (lit)
    EQ        [reduce using rule 52 (fcall)]
    EQ        [reduce using rule 54 (expr)]
    NEQ       reduce using rule 47 (lit)
    NEQ       [reduce using rule 52 (fcall)]
    NEQ       [reduce using rule 54 (expr)]
    LT        reduce using rule 47 (lit)
    LT        [reduce using rule 52 (fcall)]
    LT        [reduce using rule 54 (expr)]
    LEQ       reduce using rule 47 (lit)
    LEQ       [reduce using rule 52 (fcall)]
    LEQ       [reduce using rule 54 (expr)]
    GT        reduce using rule 47 (lit)
    GT        [reduce using rule 52 (fcall)]
    GT        [reduce using rule 54 (expr)]
    GEQ       reduce using rule 47 (lit)
    GEQ       [reduce using rule 52 (fcall)]
    GEQ       [reduce using rule 54 (expr)]
    $default  reduce using rule 47 (lit)

    lit    go to state 35
    fcall  go to state 36
    expr   go to state 94


state 72

   43 print: PRINTF LPAREN expression_list RPAREN .

    $default  reduce using rule 43 (print)


state 73

   26 var_decl: primtype ID ASSIGN expr .
   57 expr: expr . PLUS expr
   58     | expr . MINUS expr
   59     | expr . TIMES expr
   60     | expr . DIVIDE expr
   61     | expr . EQ expr
   62     | expr . NEQ expr
   63     | expr . LT expr
   64     | expr . LEQ expr
   65     | expr . GT expr
   66     | expr . GEQ expr
   67     | expr . CASTBOOL expr

    PLUS      shift, and go to state 54
    MINUS     shift, and go to state 55
    TIMES     shift, and go to state 56
    DIVIDE    shift, and go to state 57
    CASTBOOL  shift, and go to state 58
    EQ        shift, and go to state 59
    NEQ       shift, and go to state 60
    LT        shift, and go to state 61
    LEQ       shift, and go to state 62
    GT        shift, and go to state 63
    GEQ       shift, and go to state 64

    $default  reduce using rule 26 (var_decl)


state 74

   69 expr: LPAREN expr RPAREN .

    $default  reduce using rule 69 (expr)


state 75

   70 expr: LBRACKET expression_list_opt RBRACKET .

    $default  reduce using rule 70 (expr)


state 76

   53 fcall: ID LPAREN expression_list_opt . RPAREN

    RPAREN  shift, and go to state 95


state 77

   37 stmt: IF LPAREN expr RPAREN stmt .
   38     | IF LPAREN expr RPAREN stmt . ELSE stmt

    ELSE  shift, and go to state 96

    $default  reduce using rule 37 (stmt)


state 78

   57 expr: expr . PLUS expr
   57     | expr PLUS expr .
   58     | expr . MINUS expr
   59     | expr . TIMES expr
   60     | expr . DIVIDE expr
   61     | expr . EQ expr
   62     | expr . NEQ expr
   63     | expr . LT expr
   64     | expr . LEQ expr
   65     | expr . GT expr
   66     | expr . GEQ expr
   67     | expr . CASTBOOL expr

    TIMES   shift, and go to state 56
    DIVIDE  shift, and go to state 57

    $default  reduce using rule 57 (expr)


state 79

   57 expr: expr . PLUS expr
   58     | expr . MINUS expr
   58     | expr MINUS expr .
   59     | expr . TIMES expr
   60     | expr . DIVIDE expr
   61     | expr . EQ expr
   62     | expr . NEQ expr
   63     | expr . LT expr
   64     | expr . LEQ expr
   65     | expr . GT expr
   66     | expr . GEQ expr
   67     | expr . CASTBOOL expr

    TIMES   shift, and go to state 56
    DIVIDE  shift, and go to state 57

    $default  reduce using rule 58 (expr)


state 80

   57 expr: expr . PLUS expr
   58     | expr . MINUS expr
   59     | expr . TIMES expr
   59     | expr TIMES expr .
   60     | expr . DIVIDE expr
   61     | expr . EQ expr
   62     | expr . NEQ expr
   63     | expr . LT expr
   64     | expr . LEQ expr
   65     | expr . GT expr
   66     | expr . GEQ expr
   67     | expr . CASTBOOL expr

    $default  reduce using rule 59 (expr)


state 81

   57 expr: expr . PLUS expr
   58     | expr . MINUS expr
   59     | expr . TIMES expr
   60     | expr . DIVIDE expr
   60     | expr DIVIDE expr .
   61     | expr . EQ expr
   62     | expr . NEQ expr
   63     | expr . LT expr
   64     | expr . LEQ expr
   65     | expr . GT expr
   66     | expr . GEQ expr
   67     | expr . CASTBOOL expr

    $default  reduce using rule 60 (expr)


state 82

   57 expr: expr . PLUS expr
   58     | expr . MINUS expr
   59     | expr . TIMES expr
   60     | expr . DIVIDE expr
   61     | expr . EQ expr
   62     | expr . NEQ expr
   63     | expr . LT expr
   64     | expr . LEQ expr
   65     | expr . GT expr
   66     | expr . GEQ expr
   67     | expr . CASTBOOL expr
   67     | expr CASTBOOL expr .

    PLUS    shift, and go to state 54
    MINUS   shift, and go to state 55
    TIMES   shift, and go to state 56
    DIVIDE  shift, and go to state 57
    EQ      shift, and go to state 59
    NEQ     shift, and go to state 60
    LT      shift, and go to state 61
    LEQ     shift, and go to state 62
    GT      shift, and go to state 63
    GEQ     shift, and go to state 64

    CASTBOOL  error (nonassociative)

    $default  reduce using rule 67 (expr)


state 83

   57 expr: expr . PLUS expr
   58     | expr . MINUS expr
   59     | expr . TIMES expr
   60     | expr . DIVIDE expr
   61     | expr . EQ expr
   61     | expr EQ expr .
   62     | expr . NEQ expr
   63     | expr . LT expr
   64     | expr . LEQ expr
   65     | expr . GT expr
   66     | expr . GEQ expr
   67     | expr . CASTBOOL expr

    PLUS    shift, and go to state 54
    MINUS   shift, and go to state 55
    TIMES   shift, and go to state 56
    DIVIDE  shift, and go to state 57
    LT      shift, and go to state 61
    LEQ     shift, and go to state 62
    GT      shift, and go to state 63
    GEQ     shift, and go to state 64

    $default  reduce using rule 61 (expr)


state 84

   57 expr: expr . PLUS expr
   58     | expr . MINUS expr
   59     | expr . TIMES expr
   60     | expr . DIVIDE expr
   61     | expr . EQ expr
   62     | expr . NEQ expr
   62     | expr NEQ expr .
   63     | expr . LT expr
   64     | expr . LEQ expr
   65     | expr . GT expr
   66     | expr . GEQ expr
   67     | expr . CASTBOOL expr

    PLUS    shift, and go to state 54
    MINUS   shift, and go to state 55
    TIMES   shift, and go to state 56
    DIVIDE  shift, and go to state 57
    LT      shift, and go to state 61
    LEQ     shift, and go to state 62
    GT      shift, and go to state 63
    GEQ     shift, and go to state 64

    $default  reduce using rule 62 (expr)


state 85

   57 expr: expr . PLUS expr
   58     | expr . MINUS expr
   59     | expr . TIMES expr
   60     | expr . DIVIDE expr
   61     | expr . EQ expr
   62     | expr . NEQ expr
   63     | expr . LT expr
   63     | expr LT expr .
   64     | expr . LEQ expr
   65     | expr . GT expr
   66     | expr . GEQ expr
   67     | expr . CASTBOOL expr

    PLUS    shift, and go to state 54
    MINUS   shift, and go to state 55
    TIMES   shift, and go to state 56
    DIVIDE  shift, and go to state 57

    $default  reduce using rule 63 (expr)


state 86

   57 expr: expr . PLUS expr
   58     | expr . MINUS expr
   59     | expr . TIMES expr
   60     | expr . DIVIDE expr
   61     | expr . EQ expr
   62     | expr . NEQ expr
   63     | expr . LT expr
   64     | expr . LEQ expr
   64     | expr LEQ expr .
   65     | expr . GT expr
   66     | expr . GEQ expr
   67     | expr . CASTBOOL expr

    PLUS    shift, and go to state 54
    MINUS   shift, and go to state 55
    TIMES   shift, and go to state 56
    DIVIDE  shift, and go to state 57

    $default  reduce using rule 64 (expr)


state 87

   57 expr: expr . PLUS expr
   58     | expr . MINUS expr
   59     | expr . TIMES expr
   60     | expr . DIVIDE expr
   61     | expr . EQ expr
   62     | expr . NEQ expr
   63     | expr . LT expr
   64     | expr . LEQ expr
   65     | expr . GT expr
   65     | expr GT expr .
   66     | expr . GEQ expr
   67     | expr . CASTBOOL expr

    PLUS    shift, and go to state 54
    MINUS   shift, and go to state 55
    TIMES   shift, and go to state 56
    DIVIDE  shift, and go to state 57

    $default  reduce using rule 65 (expr)


state 88

   57 expr: expr . PLUS expr
   58     | expr . MINUS expr
   59     | expr . TIMES expr
   60     | expr . DIVIDE expr
   61     | expr . EQ expr
   62     | expr . NEQ expr
   63     | expr . LT expr
   64     | expr . LEQ expr
   65     | expr . GT expr
   66     | expr . GEQ expr
   66     | expr GEQ expr .
   67     | expr . CASTBOOL expr

    PLUS    shift, and go to state 54
    MINUS   shift, and go to state 55
    TIMES   shift, and go to state 56
    DIVIDE  shift, and go to state 57

    $default  reduce using rule 66 (expr)


state 89

   39 stmt: FOR LPAREN expr_opt SEMI expr_opt . SEMI expr_opt RPAREN stmt

    SEMI  shift, and go to state 97


state 90

   40 stmt: WHILE LPAREN expr RPAREN stmt .

    $default  reduce using rule 40 (stmt)


state 91

   22 formal_list: primtype ID .

    $default  reduce using rule 22 (formal_list)


state 92

   16 func_decl: FUNC ID LPAREN arguments RPAREN . return_type LBRACE fstmt_list RBRACE
   17          | FUNC ID LPAREN arguments RPAREN . LBRACE fstmt_list RBRACE

    LPAREN  shift, and go to state 98
    LBRACE  shift, and go to state 99
    LIST    shift, and go to state 3
    TYPE    shift, and go to state 11

    LBRACE  [reduce using rule 1 (primtype)]
    LBRACE  [reduce using rule 12 (return_type)]

    primtype     go to state 100
    return_type  go to state 101


state 93

   23 formal_list: formal_list COMMA . primtype ID

    LIST  shift, and go to state 3
    TYPE  shift, and go to state 11

    $default  reduce using rule 1 (primtype)

    primtype  go to state 102


state 94

   57 expr: expr . PLUS expr
   58     | expr . MINUS expr
   59     | expr . TIMES expr
   60     | expr . DIVIDE expr
   61     | expr . EQ expr
   62     | expr . NEQ expr
   63     | expr . LT expr
   64     | expr . LEQ expr
   65     | expr . GT expr
   66     | expr . GEQ expr
   67     | expr . CASTBOOL expr
   78 expression_list_internal: expression_list_internal COMMA expr .

    PLUS      shift, and go to state 54
    MINUS     shift, and go to state 55
    TIMES     shift, and go to state 56
    DIVIDE    shift, and go to state 57
    CASTBOOL  shift, and go to state 58
    EQ        shift, and go to state 59
    NEQ       shift, and go to state 60
    LT        shift, and go to state 61
    LEQ       shift, and go to state 62
    GT        shift, and go to state 63
    GEQ       shift, and go to state 64

    $default  reduce using rule 78 (expression_list_internal)


state 95

   53 fcall: ID LPAREN expression_list_opt RPAREN .

    $default  reduce using rule 53 (fcall)


state 96

   38 stmt: IF LPAREN expr RPAREN stmt ELSE . stmt

    LIST     shift, and go to state 3
    IF       shift, and go to state 4
    FOR      shift, and go to state 5
    WHILE    shift, and go to state 6
    PRINTLN  shift, and go to state 8
    PRINTF   shift, and go to state 9
    ID       shift, and go to state 10
    TYPE     shift, and go to state 11

    SEMI      reduce using rule 24 (var_decl)
    SEMI      [reduce using rule 33 (stmt)]
    SEMI      [reduce using rule 41 (print)]
    ELSE      reduce using rule 24 (var_decl)
    ELSE      [reduce using rule 33 (stmt)]
    ELSE      [reduce using rule 41 (print)]
    ID        [reduce using rule 1 (primtype)]
    $default  reduce using rule 24 (var_decl)

    primtype  go to state 12
    var_decl  go to state 14
    stmt      go to state 103
    print     go to state 16


state 97

   39 stmt: FOR LPAREN expr_opt SEMI expr_opt SEMI . expr_opt RPAREN stmt

    LPAREN      shift, and go to state 28
    LBRACKET    shift, and go to state 29
    ID          shift, and go to state 30
    STRING_LIT  shift, and go to state 31
    INT_VAL     shift, and go to state 32
    FLOAT_LIT   shift, and go to state 33
    BOOL_LIT    shift, and go to state 34

    RPAREN    reduce using rule 44 (expr_opt)
    RPAREN    [reduce using rule 45 (expr_opt)]
    RPAREN    [reduce using rule 47 (lit)]
    RPAREN    [reduce using rule 52 (fcall)]
    RPAREN    [reduce using rule 54 (expr)]
    PLUS      reduce using rule 47 (lit)
    PLUS      [reduce using rule 52 (fcall)]
    PLUS      [reduce using rule 54 (expr)]
    MINUS     reduce using rule 47 (lit)
    MINUS     [reduce using rule 52 (fcall)]
    MINUS     [reduce using rule 54 (expr)]
    TIMES     reduce using rule 47 (lit)
    TIMES     [reduce using rule 52 (fcall)]
    TIMES     [reduce using rule 54 (expr)]
    DIVIDE    reduce using rule 47 (lit)
    DIVIDE    [reduce using rule 52 (fcall)]
    DIVIDE    [reduce using rule 54 (expr)]
    CASTBOOL  reduce using rule 47 (lit)
    CASTBOOL  [reduce using rule 52 (fcall)]
    CASTBOOL  [reduce using rule 54 (expr)]
    EQ        reduce using rule 47 (lit)
    EQ        [reduce using rule 52 (fcall)]
    EQ        [reduce using rule 54 (expr)]
    NEQ       reduce using rule 47 (lit)
    NEQ       [reduce using rule 52 (fcall)]
    NEQ       [reduce using rule 54 (expr)]
    LT        reduce using rule 47 (lit)
    LT        [reduce using rule 52 (fcall)]
    LT        [reduce using rule 54 (expr)]
    LEQ       reduce using rule 47 (lit)
    LEQ       [reduce using rule 52 (fcall)]
    LEQ       [reduce using rule 54 (expr)]
    GT        reduce using rule 47 (lit)
    GT        [reduce using rule 52 (fcall)]
    GT        [reduce using rule 54 (expr)]
    GEQ       reduce using rule 47 (lit)
    GEQ       [reduce using rule 52 (fcall)]
    GEQ       [reduce using rule 54 (expr)]
    $default  reduce using rule 47 (lit)

    expr_opt  go to state 104
    lit       go to state 35
    fcall     go to state 36
    expr      go to state 39


state 98

   14 return_type: LPAREN . datatype_list RPAREN

    LIST  shift, and go to state 3
    TYPE  shift, and go to state 11

    RPAREN    reduce using rule 1 (primtype)
    RPAREN    [reduce using rule 8 (datatype_list)]
    RPAREN    [reduce using rule 11 (datatype_list)]
    COMMA     reduce using rule 1 (primtype)
    COMMA     [reduce using rule 8 (datatype_list)]
    COMMA     [reduce using rule 11 (datatype_list)]
    $default  reduce using rule 1 (primtype)

    primtype       go to state 105
    datatype_list  go to state 106


state 99

   17 func_decl: FUNC ID LPAREN arguments RPAREN LBRACE . fstmt_list RBRACE

    SEMI      reduce using rule 27 (fstmt_list)
    SEMI      [reduce using rule 28 (fstmt_list)]
    RBRACE    reduce using rule 27 (fstmt_list)
    RBRACE    [reduce using rule 28 (fstmt_list)]
    LIST      reduce using rule 27 (fstmt_list)
    LIST      [reduce using rule 28 (fstmt_list)]
    RETURN    reduce using rule 27 (fstmt_list)
    RETURN    [reduce using rule 28 (fstmt_list)]
    IF        reduce using rule 27 (fstmt_list)
    IF        [reduce using rule 28 (fstmt_list)]
    FOR       reduce using rule 27 (fstmt_list)
    FOR       [reduce using rule 28 (fstmt_list)]
    WHILE     reduce using rule 27 (fstmt_list)
    WHILE     [reduce using rule 28 (fstmt_list)]
    PRINTLN   reduce using rule 27 (fstmt_list)
    PRINTLN   [reduce using rule 28 (fstmt_list)]
    PRINTF    reduce using rule 27 (fstmt_list)
    PRINTF    [reduce using rule 28 (fstmt_list)]
    ID        reduce using rule 27 (fstmt_list)
    ID        [reduce using rule 28 (fstmt_list)]
    TYPE      reduce using rule 27 (fstmt_list)
    TYPE      [reduce using rule 28 (fstmt_list)]
    $default  reduce using rule 27 (fstmt_list)

    fstmt_list  go to state 107


state 100

   13 return_type: primtype .

    $default  reduce using rule 13 (return_type)


state 101

   16 func_decl: FUNC ID LPAREN arguments RPAREN return_type . LBRACE fstmt_list RBRACE

    LBRACE  shift, and go to state 108


state 102

   23 formal_list: formal_list COMMA primtype . ID

    ID  shift, and go to state 109


state 103

   38 stmt: IF LPAREN expr RPAREN stmt ELSE stmt .

    $default  reduce using rule 38 (stmt)


state 104

   39 stmt: FOR LPAREN expr_opt SEMI expr_opt SEMI expr_opt . RPAREN stmt

    RPAREN  shift, and go to state 110


state 105

   10 datatype_list: primtype .

    $default  reduce using rule 10 (datatype_list)


state 106

    9 datatype_list: datatype_list . COMMA primtype
   14 return_type: LPAREN datatype_list . RPAREN

    RPAREN  shift, and go to state 111
    COMMA   shift, and go to state 112


state 107

   17 func_decl: FUNC ID LPAREN arguments RPAREN LBRACE fstmt_list . RBRACE
   29 fstmt_list: fstmt_list . func_stmt

    RBRACE   shift, and go to state 113
    LIST     shift, and go to state 3
    RETURN   shift, and go to state 114
    IF       shift, and go to state 4
    FOR      shift, and go to state 5
    WHILE    shift, and go to state 6
    PRINTLN  shift, and go to state 8
    PRINTF   shift, and go to state 9
    ID       shift, and go to state 10
    TYPE     shift, and go to state 11

    SEMI      reduce using rule 24 (var_decl)
    SEMI      [reduce using rule 30 (func_stmt)]
    SEMI      [reduce using rule 33 (stmt)]
    SEMI      [reduce using rule 41 (print)]
    RBRACE    [reduce using rule 30 (func_stmt)]
    LIST      [reduce using rule 30 (func_stmt)]
    RETURN    [reduce using rule 30 (func_stmt)]
    IF        [reduce using rule 30 (func_stmt)]
    FOR       [reduce using rule 30 (func_stmt)]
    WHILE     [reduce using rule 30 (func_stmt)]
    PRINTLN   [reduce using rule 30 (func_stmt)]
    PRINTF    [reduce using rule 30 (func_stmt)]
    ID        [reduce using rule 1 (primtype)]
    ID        [reduce using rule 30 (func_stmt)]
    TYPE      [reduce using rule 30 (func_stmt)]
    $default  reduce using rule 24 (var_decl)

    primtype   go to state 12
    var_decl   go to state 14
    func_stmt  go to state 115
    stmt       go to state 116
    print      go to state 16


state 108

   16 func_decl: FUNC ID LPAREN arguments RPAREN return_type LBRACE . fstmt_list RBRACE

    SEMI      reduce using rule 27 (fstmt_list)
    SEMI      [reduce using rule 28 (fstmt_list)]
    RBRACE    reduce using rule 27 (fstmt_list)
    RBRACE    [reduce using rule 28 (fstmt_list)]
    LIST      reduce using rule 27 (fstmt_list)
    LIST      [reduce using rule 28 (fstmt_list)]
    RETURN    reduce using rule 27 (fstmt_list)
    RETURN    [reduce using rule 28 (fstmt_list)]
    IF        reduce using rule 27 (fstmt_list)
    IF        [reduce using rule 28 (fstmt_list)]
    FOR       reduce using rule 27 (fstmt_list)
    FOR       [reduce using rule 28 (fstmt_list)]
    WHILE     reduce using rule 27 (fstmt_list)
    WHILE     [reduce using rule 28 (fstmt_list)]
    PRINTLN   reduce using rule 27 (fstmt_list)
    PRINTLN   [reduce using rule 28 (fstmt_list)]
    PRINTF    reduce using rule 27 (fstmt_list)
    PRINTF    [reduce using rule 28 (fstmt_list)]
    ID        reduce using rule 27 (fstmt_list)
    ID        [reduce using rule 28 (fstmt_list)]
    TYPE      reduce using rule 27 (fstmt_list)
    TYPE      [reduce using rule 28 (fstmt_list)]
    $default  reduce using rule 27 (fstmt_list)

    fstmt_list  go to state 117


state 109

   23 formal_list: formal_list COMMA primtype ID .

    $default  reduce using rule 23 (formal_list)


state 110

   39 stmt: FOR LPAREN expr_opt SEMI expr_opt SEMI expr_opt RPAREN . stmt

    LIST     shift, and go to state 3
    IF       shift, and go to state 4
    FOR      shift, and go to state 5
    WHILE    shift, and go to state 6
    PRINTLN  shift, and go to state 8
    PRINTF   shift, and go to state 9
    ID       shift, and go to state 10
    TYPE     shift, and go to state 11

    SEMI      reduce using rule 24 (var_decl)
    SEMI      [reduce using rule 33 (stmt)]
    SEMI      [reduce using rule 41 (print)]
    ELSE      reduce using rule 24 (var_decl)
    ELSE      [reduce using rule 33 (stmt)]
    ELSE      [reduce using rule 41 (print)]
    ID        [reduce using rule 1 (primtype)]
    $default  reduce using rule 24 (var_decl)

    primtype  go to state 12
    var_decl  go to state 14
    stmt      go to state 118
    print     go to state 16


state 111

   14 return_type: LPAREN datatype_list RPAREN .

    $default  reduce using rule 14 (return_type)


state 112

    9 datatype_list: datatype_list COMMA . primtype

    LIST  shift, and go to state 3
    TYPE  shift, and go to state 11

    $default  reduce using rule 1 (primtype)

    primtype  go to state 119


state 113

   17 func_decl: FUNC ID LPAREN arguments RPAREN LBRACE fstmt_list RBRACE .

    $default  reduce using rule 17 (func_decl)


state 114

   31 func_stmt: RETURN . expr SEMI

    LPAREN      shift, and go to state 28
    LBRACKET    shift, and go to state 29
    ID          shift, and go to state 30
    STRING_LIT  shift, and go to state 31
    INT_VAL     shift, and go to state 32
    FLOAT_LIT   shift, and go to state 33
    BOOL_LIT    shift, and go to state 34

    SEMI      reduce using rule 47 (lit)
    SEMI      [reduce using rule 52 (fcall)]
    SEMI      [reduce using rule 54 (expr)]
    PLUS      reduce using rule 47 (lit)
    PLUS      [reduce using rule 52 (fcall)]
    PLUS      [reduce using rule 54 (expr)]
    MINUS     reduce using rule 47 (lit)
    MINUS     [reduce using rule 52 (fcall)]
    MINUS     [reduce using rule 54 (expr)]
    TIMES     reduce using rule 47 (lit)
    TIMES     [reduce using rule 52 (fcall)]
    TIMES     [reduce using rule 54 (expr)]
    DIVIDE    reduce using rule 47 (lit)
    DIVIDE    [reduce using rule 52 (fcall)]
    DIVIDE    [reduce using rule 54 (expr)]
    CASTBOOL  reduce using rule 47 (lit)
    CASTBOOL  [reduce using rule 52 (fcall)]
    CASTBOOL  [reduce using rule 54 (expr)]
    EQ        reduce using rule 47 (lit)
    EQ        [reduce using rule 52 (fcall)]
    EQ        [reduce using rule 54 (expr)]
    NEQ       reduce using rule 47 (lit)
    NEQ       [reduce using rule 52 (fcall)]
    NEQ       [reduce using rule 54 (expr)]
    LT        reduce using rule 47 (lit)
    LT        [reduce using rule 52 (fcall)]
    LT        [reduce using rule 54 (expr)]
    LEQ       reduce using rule 47 (lit)
    LEQ       [reduce using rule 52 (fcall)]
    LEQ       [reduce using rule 54 (expr)]
    GT        reduce using rule 47 (lit)
    GT        [reduce using rule 52 (fcall)]
    GT        [reduce using rule 54 (expr)]
    GEQ       reduce using rule 47 (lit)
    GEQ       [reduce using rule 52 (fcall)]
    GEQ       [reduce using rule 54 (expr)]
    $default  reduce using rule 47 (lit)

    lit    go to state 35
    fcall  go to state 36
    expr   go to state 120


state 115

   29 fstmt_list: fstmt_list func_stmt .

    $default  reduce using rule 29 (fstmt_list)


state 116

   32 func_stmt: stmt . SEMI

    SEMI  shift, and go to state 121


state 117

   16 func_decl: FUNC ID LPAREN arguments RPAREN return_type LBRACE fstmt_list . RBRACE
   29 fstmt_list: fstmt_list . func_stmt

    RBRACE   shift, and go to state 122
    LIST     shift, and go to state 3
    RETURN   shift, and go to state 114
    IF       shift, and go to state 4
    FOR      shift, and go to state 5
    WHILE    shift, and go to state 6
    PRINTLN  shift, and go to state 8
    PRINTF   shift, and go to state 9
    ID       shift, and go to state 10
    TYPE     shift, and go to state 11

    SEMI      reduce using rule 24 (var_decl)
    SEMI      [reduce using rule 30 (func_stmt)]
    SEMI      [reduce using rule 33 (stmt)]
    SEMI      [reduce using rule 41 (print)]
    RBRACE    [reduce using rule 30 (func_stmt)]
    LIST      [reduce using rule 30 (func_stmt)]
    RETURN    [reduce using rule 30 (func_stmt)]
    IF        [reduce using rule 30 (func_stmt)]
    FOR       [reduce using rule 30 (func_stmt)]
    WHILE     [reduce using rule 30 (func_stmt)]
    PRINTLN   [reduce using rule 30 (func_stmt)]
    PRINTF    [reduce using rule 30 (func_stmt)]
    ID        [reduce using rule 1 (primtype)]
    ID        [reduce using rule 30 (func_stmt)]
    TYPE      [reduce using rule 30 (func_stmt)]
    $default  reduce using rule 24 (var_decl)

    primtype   go to state 12
    var_decl   go to state 14
    func_stmt  go to state 115
    stmt       go to state 116
    print      go to state 16


state 118

   39 stmt: FOR LPAREN expr_opt SEMI expr_opt SEMI expr_opt RPAREN stmt .

    $default  reduce using rule 39 (stmt)


state 119

    9 datatype_list: datatype_list COMMA primtype .

    $default  reduce using rule 9 (datatype_list)


state 120

   31 func_stmt: RETURN expr . SEMI
   57 expr: expr . PLUS expr
   58     | expr . MINUS expr
   59     | expr . TIMES expr
   60     | expr . DIVIDE expr
   61     | expr . EQ expr
   62     | expr . NEQ expr
   63     | expr . LT expr
   64     | expr . LEQ expr
   65     | expr . GT expr
   66     | expr . GEQ expr
   67     | expr . CASTBOOL expr

    SEMI      shift, and go to state 123
    PLUS      shift, and go to state 54
    MINUS     shift, and go to state 55
    TIMES     shift, and go to state 56
    DIVIDE    shift, and go to state 57
    CASTBOOL  shift, and go to state 58
    EQ        shift, and go to state 59
    NEQ       shift, and go to state 60
    LT        shift, and go to state 61
    LEQ       shift, and go to state 62
    GT        shift, and go to state 63
    GEQ       shift, and go to state 64


state 121

   32 func_stmt: stmt SEMI .

    $default  reduce using rule 32 (func_stmt)


state 122

   16 func_decl: FUNC ID LPAREN arguments RPAREN return_type LBRACE fstmt_list RBRACE .

    $default  reduce using rule 16 (func_decl)


state 123

   31 func_stmt: RETURN expr SEMI .

    $default  reduce using rule 31 (func_stmt)
